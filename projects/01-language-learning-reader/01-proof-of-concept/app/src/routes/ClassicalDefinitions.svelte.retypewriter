reTypewriter Snapshots v1

--01----------

--02----------
<script lang="ts">
  export let character: string;
</script>

<div class="chinese_font" style="font-size: 2rem;">
  {character}
</div>

--03----------
<script lang="ts">
  import classical_to_mandarin_dictionary from '../data/classical_to_mandarin_dictionary_swords_shields.json';

  interface ClassicalToMandarinDictionaryEntry {
    word: string;
    explain: {
      [pronunciation: string]: string[];
    };
    url: string;
  }

  const entries: ClassicalToMandarinDictionaryEntry[] =	classical_to_mandarin_dictionary;

  export let character: string;
</script>

<div class="chinese_font" style="font-size: 2rem;">
  {character}
</div>

--04----------
<script lang="ts">
  import classical_to_mandarin_dictionary from '../data/classical_to_mandarin_dictionary_swords_shields.json';

  interface ClassicalToMandarinDictionaryEntry {
    word: string;
    explain: {
      [pronunciation: string]: string[];
    };
    url: string;
  }

  const entries: ClassicalToMandarinDictionaryEntry[] =	classical_to_mandarin_dictionary;
  
  export let character: string;

  $: matchingEntry = entries.find((entry) => entry.word === character)
</script>

<div class="chinese_font" style="font-size: 2rem;">
  {character}
</div>

<pre>{JSON.stringify(matchingEntry, null, 2)}</pre>

--05----------
<script lang="ts">
  import classical_to_mandarin_dictionary from '../data/classical_to_mandarin_dictionary_swords_shields.json';

  interface ClassicalToMandarinDictionaryEntry {
    word: string;
    explain: {
      [pronunciation: string]: string[];
    };
    url: string;
  }

  const entries: ClassicalToMandarinDictionaryEntry[] =	classical_to_mandarin_dictionary;
  
  export let character: string;

  $: matchingEntry = entries.find((entry) => entry.word === character)
</script>

<div class="chinese_font" style="font-size: 2rem;">
  {character}
  {#if matchingEntry}
    {#each Object.entries(matchingEntry.explain) as [pronuncation, explanations]}
      {pronuncation}
      <div>
        {#each explanations as explanation}
          <div>
            {@html explanation}
          </div>
        {/each}
      </div>
    {/each}
  {/if}
</div>

<pre>{JSON.stringify(matchingEntry, null, 2)}</pre>

--06----------
<script lang="ts">
  import classical_to_mandarin_dictionary from '../data/classical_to_mandarin_dictionary_swords_shields.json';

  interface ClassicalToMandarinDictionaryEntry {
    word: string;
    explain: {
      [pronunciation: string]: string[];
    };
    url: string;
  }

  const entries: ClassicalToMandarinDictionaryEntry[] =	classical_to_mandarin_dictionary;
  
  export let character: string;

  $: matchingEntry = entries.find((entry) => entry.word === character)
</script>

<div class="chinese_font" style="font-size: 2rem; display: flex;">
  {character}
  {#if matchingEntry}
    <div style="font-size: 75%; margin-left: 8px; width: 100%;">
      {#each Object.entries(matchingEntry.explain) as [pronuncation, explanations]}
        <div style="display: flex;">
          {pronuncation}
          <div style="width: 100%; margin: 2px 2px 2px 8px; padding: 2px; border: 1px dashed lightgray;">
            {#each explanations as explanation}
              <div>
                {@html explanation}
              </div>
            {/each}
          </div>
        </div>
      {/each}
    </div>
  {/if}
</div>

--------------
