hash,token_count,title,combined_title,filename,content
5cdf68df,76,Before we begin,Introduction > Before we begin,/10-getting-started/10-introduction.md,"> If you're new to Svelte or SvelteKit we recommend checking out the (experimental!) [interactive tutorial](https://learn.svelte.dev).
>
> If you get stuck, reach out for help in the [Discord chatroom](https://svelte.dev/chat). "
ccd048d0,75,What is SvelteKit?,Introduction > What is SvelteKit?,/10-getting-started/10-introduction.md,"SvelteKit is a framework for rapidly developing robust, performant web applications using [Svelte](https://svelte.dev/). If you're coming from React, SvelteKit is similar to Next. If you're coming from Vue, SvelteKit is similar to Nuxt. "
e1f661f,125,What is Svelte?,Introduction > What is Svelte?,/10-getting-started/10-introduction.md,"In short, Svelte is a way of writing user interface components — like a navigation bar, comment section, or contact form — that users see and interact with in their browsers. The Svelte compiler converts your components to JavaScript that can be run to render the HTML for the page and to CSS that styles the page. You don't need to know Svelte to understand the rest of this guide, but it will help. If you'd like to learn more, check out [the Svelte tutorial](https://svelte.dev/tutorial). "
58531853,400,What does SvelteKit provide on top of Svelte?,Introduction > What does SvelteKit provide on top of Svelte?,/10-getting-started/10-introduction.md,"Svelte renders UI components. You can compose these components and render an entire page with just Svelte, but you need more than just Svelte to write an entire app. SvelteKit provides basic functionality like a [router](glossary#routing) — which updates the UI when a link is clicked — and [server-side rendering (SSR)](glossary#ssr). But beyond that, building an app with all the modern best practices is fiendishly complicated. Those practices include [build optimizations](https://vitejs.dev/guide/features.html#build-optimizations), so that you load only the minimal required code; [offline support](service-workers); [preloading](link-options#data-sveltekit-preload-data) pages before the user initiates navigation; [configurable rendering](page-options) that allows you to render different parts of your app on the server with [SSR](glossary#ssr), in the browser [client-side rendering](glossary#csr), or at build-time with [prerendering](glossary#prerendering); and many other things. SvelteKit does all the boring stuff for you so that you can get on with the creative part. It reflects changes to your code in the browser instantly to provide a lightning-fast and feature-rich development experience by leveraging [Vite](https://vitejs.dev/) with a [Svelte plugin](https://github.com/sveltejs/vite-plugin-svelte) to do [Hot Module Replacement (HMR)](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#hot). "
21108110,259,Project structure,Project structure,/10-getting-started/30-project-structure.md,"A typical SvelteKit project looks like this: ```bash
my-project/
├ src/
│ ├ lib/
│ │ ├ server/
│ │ │ └ [your server-only lib files]
│ │ └ [your lib files]
│ ├ params/
│ │ └ [your param matchers]
│ ├ routes/
│ │ └ [your routes]
│ ├ app.html
│ ├ error.html
│ ├ hooks.client.js
│ └ hooks.server.js
├ static/
│ └ [your static assets]
├ tests/
│ └ [your tests]
├ package.json
├ svelte.config.js
├ tsconfig.json
└ vite.config.js
``` You'll also find common files like `.gitignore` and `.npmrc` (and `.prettierrc` and `.eslintrc.cjs` and so on, if you chose those options when running `npm create svelte@latest`). "
4c00ac00,768,src,Project structure > Project files > src,/10-getting-started/30-project-structure.md,"The `src` directory contains the meat of your project. Everything except `src/routes` and `src/app.html` is optional. *   `lib` contains your library code (utilities and components), which can be imported via the [`$lib`](modules#$lib) alias, or packaged up for distribution using [`svelte-package`](packaging)
    *   `server` contains your server-only library code. It can be imported by using the [`$lib/server`](server-only-modules) alias. SvelteKit will prevent you from importing these in client code.
*   `params` contains any [param matchers](advanced-routing#matching) your app needs
*   `routes` contains the [routes](routing) of your application. You can also colocate other components that are only used within a single route here
*   `app.html` is your page template — an HTML document containing the following placeholders:
    *   `%sveltekit.head%` — `<link>` and `<script>` elements needed by the app, plus any `<svelte:head>` content
    *   `%sveltekit.body%` — the markup for a rendered page. This should live inside a `<div>` or other element, rather than directly inside `<body>`, to prevent bugs caused by browser extensions injecting elements that are then destroyed by the hydration process. SvelteKit will warn you in development if this is not the case
    *   `%sveltekit.assets%` — either [`paths.assets`](configuration#paths), if specified, or a relative path to [`paths.base`](configuration#paths)
    *   `%sveltekit.nonce%` — a [CSP](configuration#csp) nonce for manually included links and scripts, if used
    *   `%sveltekit.env.[NAME]%` - this will be replaced at render time with the `[NAME]` environment variable, which must begin with the [`publicPrefix`](https://kit.svelte.dev/docs/configuration#env) (usually `PUBLIC_`). It will fallback to `''` if not matched.
*   `error.html` is the page that is rendered when everything else fails. It can contain the following placeholders:
    *   `%sveltekit.status%` — the HTTP status
    *   `%sveltekit.error.message%` — the error message
*   `hooks.client.js` contains your client [hooks](/docs/hooks)
*   `hooks.server.js` contains your server [hooks](/docs/hooks)
*   `service-worker.js` contains your [service worker](/docs/service-workers) You can use `.ts` files instead of `.js` files, if using TypeScript. If you added [Vitest](https://vitest.dev) when you set up your project, your unit tests will live in the `src` directory with a `.test.js` (or `.test.ts`) extension. "
8c823682,39,static,Project structure > Project files > static,/10-getting-started/30-project-structure.md,"Any static assets that should be served as-is, like `robots.txt` or `favicon.png`, go in here. "
97016f01,41,tests,Project structure > Project files > tests,/10-getting-started/30-project-structure.md,"If you added [Playwright](https://playwright.dev/) for browser testing when you set up your project, the tests will live in this directory. "
f42b28ab,119,package.json,Project structure > Project files > package.json,/10-getting-started/30-project-structure.md,"Your `package.json` file must include `@sveltejs/kit`, `svelte` and `vite` as `devDependencies`. When you create a project with `npm create svelte@latest`, you'll also notice that `package.json` includes `""type"": ""module""`. This means that `.js` files are interpreted as native JavaScript modules with `import` and `export` keywords. Legacy CommonJS files need a `.cjs` file extension. "
dbb5b8b5,34,svelte.config.js,Project structure > Project files > svelte.config.js,/10-getting-started/30-project-structure.md,This file contains your Svelte and SvelteKit [configuration](configuration). 
7c5d2c5,102,tsconfig.json,Project structure > Project files > tsconfig.json,/10-getting-started/30-project-structure.md,"This file (or `jsconfig.json`, if you prefer type-checked `.js` files over `.ts` files) configures TypeScript, if you added typechecking during `npm create svelte@latest`. Since SvelteKit relies on certain configuration being set a specific way, it generates its own `.svelte-kit/tsconfig.json` file which your own config `extends`. "
8d4f914f,88,vite.config.js,Project structure > Project files > vite.config.js,/10-getting-started/30-project-structure.md,"A SvelteKit project is really just a [Vite](https://vitejs.dev) project that uses the [`@sveltejs/kit/vite`](modules#sveltejs-kit-vite) plugin, along with any other [Vite configuration](https://vitejs.dev/config/). "
f5bfa1bf,85,.svelte-kit,Project structure > Other files > .svelte-kit,/10-getting-started/30-project-structure.md,"As you develop and build your project, SvelteKit will generate files in a `.svelte-kit` directory (configurable as [`outDir`](configuration#outdir)). You can ignore its contents, and delete them at any time (they will be regenerated when you next `dev` or `build`). "
57001b80,186,Web standards,Web standards,/10-getting-started/40-web-standards.md,"Throughout this documentation, you'll see references to the standard [Web APIs](https://developer.mozilla.org/en-US/docs/Web/API) that SvelteKit builds on top of. Rather than reinventing the wheel, we *use the platform*, which means your existing web development skills are applicable to SvelteKit. Conversely, time spent learning SvelteKit will help you be a better web developer elsewhere. These APIs are available in all modern browsers and in many non-browser environments like Cloudflare Workers, Deno and Vercel Edge Functions. During development, and in [adapters](adapters) for Node-based environments (including AWS Lambda), they're made available via polyfills where necessary (for now, that is — Node is rapidly adding support for more web standards). In particular, you'll get comfortable with the following: "
83ead3e,242,Fetch APIs,Web standards > Fetch APIs,/10-getting-started/40-web-standards.md,"SvelteKit uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) for getting data from the network. It's available in [hooks](hooks) and [server routes](routing#server) as well as in the browser. > A special version of `fetch` is available in [`load`](load) functions, [server hooks](hooks#server-hooks) and [API routes](routing#server) for invoking endpoints directly during server-side rendering, without making an HTTP call, while preserving credentials. (To make credentialled fetches in server-side code outside `load`, you must explicitly pass `cookie` and/or `authorization` headers.) It also allows you to make relative requests, whereas server-side `fetch` normally requires a fully qualified URL. Besides `fetch` itself, the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) includes the following interfaces: "
eca608a6,95,Request,Web standards > Fetch APIs > Request,/10-getting-started/40-web-standards.md,An instance of [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) is accessible in [hooks](hooks) and [server routes](routing#server) as `event.request`. It contains useful methods like `request.json()` and `request.formData()` for getting data that was posted to an endpoint. 
239a379a,85,Response,Web standards > Fetch APIs > Response,/10-getting-started/40-web-standards.md,"An instance of [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) is returned from `await fetch(...)` and handlers in `+server.js` files. Fundamentally, a SvelteKit app is a machine for turning a `Request` into a `Response`. "
c7ceb1ce,191,Headers,Web standards > Fetch APIs > Headers,/10-getting-started/40-web-standards.md,"The [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) interface allows you to read incoming `request.headers` and set outgoing `response.headers`: ```js
// @errors: 2461
/// file: src/routes/what-is-my-user-agent/+server.js
import { json } from '@sveltejs/kit';

/** @type {import('./$types').RequestHandler} */
export function GET(event) {
	// log all headers
	console.log(...event.request.headers);

	return json({
		// retrieve a specific header
		userAgent: event.request.headers.get('user-agent')
	});
}
``` "
882e512e,181,FormData,Web standards > FormData,/10-getting-started/40-web-standards.md,"When dealing with HTML native form submissions you'll be working with [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) objects. ```js
// @errors: 2461
/// file: src/routes/hello/+server.js
import { json } from '@sveltejs/kit';

/** @type {import('./$types').RequestHandler} */
export async function POST(event) {
	const body = await event.request.formData();

	// log all fields
	console.log([...body]);

	return json({
		// get a specific field's value
		name: body.get('name') ?? 'world'
	});
}
``` "
2b17d717,179,Stream APIs,Web standards > Stream APIs,/10-getting-started/40-web-standards.md,"Most of the time, your endpoints will return complete data, as in the `userAgent` example above. Sometimes, you may need to return a response that's too large to fit in memory in one go, or is delivered in chunks, and for this the platform provides [streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API) — [ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), [WritableStream](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream) and [TransformStream](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream). "
5bfba7fb,151,URL APIs,Web standards > URL APIs,/10-getting-started/40-web-standards.md,"URLs are represented by the [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) interface, which includes useful properties like `origin` and `pathname` (and, in the browser, `hash`). This interface shows up in various places — `event.url` in [hooks](hooks) and [server routes](routing#server), [`$page.url`](modules#$app-stores) in [pages](routing#page), `from` and `to` in [`beforeNavigate` and `afterNavigate`](modules#$app-navigation) and so on. "
3f6af36a,134,URLSearchParams,Web standards > URL APIs > URLSearchParams,/10-getting-started/40-web-standards.md,"Wherever you encounter a URL, you can access query parameters via `url.searchParams`, which is an instance of [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams): ```js
// @filename: ambient.d.ts
declare global {
	const url: URL;
}

export {};

// @filename: index.js
// 
const foo = url.searchParams.get('foo');
``` "
7265b6e5,100,Web Crypto,Web standards > Web Crypto,/10-getting-started/40-web-standards.md,"The [Web Crypto API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API) is made available via the `crypto` global. It's used internally for [Content Security Policy](configuration#csp) headers, but you can also use it for things like generating UUIDs: ```js
const uuid = crypto.randomUUID();
``` "
4f835283,184,Routing,Routing,/20-core-concepts/10-routing.md,"At the heart of SvelteKit is a *filesystem-based router*. The routes of your app — i.e. the URL paths that users can access — are defined by the directories in your codebase: *   `src/routes` is the root route
*   `src/routes/about` creates an `/about` route
*   `src/routes/blog/[slug]` creates a route with a *parameter*, `slug`, that can be used to load data dynamically when a user requests a page like `/blog/hello-world` > You can change `src/routes` to a different directory by editing the [project config](configuration). Each route directory contains one or more *route files*, which can be identified by their `+` prefix. "
8beec7ee,306,+page.svelte,Routing > +page > +page.svelte,/20-core-concepts/10-routing.md,"A `+page.svelte` component defines a page of your app. By default, pages are rendered both on the server ([SSR](glossary#ssr)) for the initial request and in the browser ([CSR](glossary#csr)) for subsequent navigation. ```svelte
/// file: src/routes/+page.svelte
<h1>Hello and welcome to my site!</h1>
<a href=""/about"">About my site</a>
``` ```svelte
/// file: src/routes/about/+page.svelte
<h1>About this site</h1>
<p>TODO...</p>
<a href=""/"">Home</a>
``` ```svelte
/// file: src/routes/blog/[slug]/+page.svelte
<script>
	/** @type {import('./$types').PageData} */
	export let data;
</script>

<h1>{data.title}</h1>
<div>{@html data.content}</div>
``` > Note that SvelteKit uses `<a>` elements to navigate between routes, rather than a framework-specific `<Link>` component. "
3210da10,347,+page.js,Routing > +page > +page.js,/20-core-concepts/10-routing.md,"Often, a page will need to load some data before it can be rendered. For this, we add a `+page.js` (or `+page.ts`, if you're TypeScript-inclined) module that exports a `load` function: ```js
/// file: src/routes/blog/[slug]/+page.js
import { error } from '@sveltejs/kit';

/** @type {import('./$types').PageLoad} */
export function load({ params }) {
	if (params.slug === 'hello-world') {
		return {
			title: 'Hello world!',
			content: 'Welcome to our blog. Lorem ipsum dolor sit amet...'
		};
	}

	throw error(404, 'Not found');
}
``` This function runs alongside `+page.svelte`, which means it runs on the server during server-side rendering and in the browser during client-side navigation. See [`load`](load) for full details of the API. As well as `load`, `+page.js` can export values that configure the page's behaviour: *   `export const prerender = true` or `false` or `'auto'`
*   `export const ssr = true` or `false`
*   `export const csr = true` or `false` You can find more information about these in [page options](page-options). "
fd224f22,447,+page.server.js,Routing > +page > +page.server.js,/20-core-concepts/10-routing.md,"If your `load` function can only run on the server — for example, if it needs to fetch data from a database or you need to access private [environment variables](modules#$env-static-private) like API keys — then you can rename `+page.js` to `+page.server.js` and change the `PageLoad` type to `PageServerLoad`. ```js
/// file: src/routes/blog/[slug]/+page.server.js

// @filename: ambient.d.ts
declare global {
	const getPostFromDatabase: (slug: string) => {
		title: string;
		content: string;
	}
}

export {};

// @filename: index.js
// 
import { error } from '@sveltejs/kit';

/** @type {import('./$types').PageServerLoad} */
export async function load({ params }) {
	const post = await getPostFromDatabase(params.slug);

	if (post) {
		return post;
	}

	throw error(404, 'Not found');
}
``` During client-side navigation, SvelteKit will load this data from the server, which means that the returned value must be serializable using [devalue](https://github.com/rich-harris/devalue). See [`load`](load) for full details of the API. Like `+page.js`, `+page.server.js` can export [page options](page-options) — `prerender`, `ssr` and `csr`. A `+page.server.js` file can also export *actions*. If `load` lets you read data from the server, `actions` let you write data *to* the server using the `<form>` element. To learn how to use them, see the [form actions](form-actions) section. "
ac4a7e4a,410,+error,Routing > +error,/20-core-concepts/10-routing.md,"If an error occurs during `load`, SvelteKit will render a default error page. You can customise this error page on a per-route basis by adding an `+error.svelte` file: ```svelte
/// file: src/routes/blog/[slug]/+error.svelte
<script>
	import { page } from '$app/stores';
</script>

<h1>{$page.status}: {$page.error.message}</h1>
``` SvelteKit will 'walk up the tree' looking for the closest error boundary — if the file above didn't exist it would try `src/routes/blog/+error.svelte` and then `src/routes/+error.svelte` before rendering the default error page. If *that* fails (or if the error was thrown from the `load` function of the root `+layout`, which sits 'above' the root `+error`), SvelteKit will bail out and render a static fallback error page, which you can customise by creating a `src/error.html` file. If the error occurs inside a `load` function in `+layout(.server).js`, the closest error boundary in the tree is an `+error.svelte` file *above* that layout (not next to it). If no route can be found (404), `src/routes/+error.svelte` (or the default error page, if that file does not exist) will be used. > `+error.svelte` is *not* used when an error occurs inside [`handle`](hooks#server-hooks-handle) or a [+server.js](#server) request handler. You can read more about error handling [here](errors). "
69fb69f,98,+layout,Routing > +layout,/20-core-concepts/10-routing.md,"So far, we've treated pages as entirely standalone components — upon navigation, the existing `+page.svelte` component will be destroyed, and a new one will take its place. But in many apps, there are elements that should be visible on *every* page, such as top-level navigation or a footer. Instead of repeating them in every `+page.svelte`, we can put them in *layouts*. "
75388d38,606,+layout.svelte,Routing > +layout > +layout.svelte,/20-core-concepts/10-routing.md,"To create a layout that applies to every page, make a file called `src/routes/+layout.svelte`. The default layout (the one that SvelteKit uses if you don't bring your own) looks like this... ```html
<slot></slot>
``` ...but we can add whatever markup, styles and behaviour we want. The only requirement is that the component includes a `<slot>` for the page content. For example, let's add a nav bar: ```html
/// file: src/routes/+layout.svelte
<nav>
	<a href=""/"">Home</a>
	<a href=""/about"">About</a>
	<a href=""/settings"">Settings</a>
</nav>

<slot></slot>
``` If we create pages for `/`, `/about` and `/settings`... ```html
/// file: src/routes/+page.svelte
<h1>Home</h1>
``` ```html
/// file: src/routes/about/+page.svelte
<h1>About</h1>
``` ```html
/// file: src/routes/settings/+page.svelte
<h1>Settings</h1>
``` ...the nav will always be visible, and clicking between the three pages will only result in the `<h1>` being replaced. Layouts can be *nested*. Suppose we don't just have a single `/settings` page, but instead have nested pages like `/settings/profile` and `/settings/notifications` with a shared submenu (for a real-life example, see [github.com/settings](https://github.com/settings)). We can create a layout that only applies to pages below `/settings` (while inheriting the root layout with the top-level nav): ```svelte
/// file: src/routes/settings/+layout.svelte
<script>
	/** @type {import('./$types').LayoutData} */
	export let data;
</script>

<h1>Settings</h1>

<div class=""submenu"">
	{#each data.sections as section}
		<a href=""/settings/{section.slug}"">{section.title}</a>
	{/each}
</div>

<slot></slot>
``` By default, each layout inherits the layout above it. Sometimes that isn't what you want - in this case, [advanced layouts](advanced-routing#advanced-layouts) can help you. "
b1f976f9,333,+layout.js,Routing > +layout > +layout.js,/20-core-concepts/10-routing.md,"Just like `+page.svelte` loading data from `+page.js`, your `+layout.svelte` component can get data from a [`load`](load) function in `+layout.js`. ```js
/// file: src/routes/settings/+layout.js
/** @type {import('./$types').LayoutLoad} */
export function load() {
	return {
		sections: [
			{ slug: 'profile', title: 'Profile' },
			{ slug: 'notifications', title: 'Notifications' }
		]
	};
}
``` If a `+layout.js` exports [page options](page-options) — `prerender`, `ssr` and `csr` — they will be used as defaults for child pages. Data returned from a layout's `load` function is also available to all its child pages: ```svelte
/// file: src/routes/settings/profile/+page.svelte
<script>
	/** @type {import('./$types').PageData} */
	export let data;

	console.log(data.sections); // [{ slug: 'profile', title: 'Profile' }, ...]
</script>
``` > Often, layout data is unchanged when navigating between pages. SvelteKit will intelligently re-run [`load`](load) functions when necessary. "
59637f63,91,+layout.server.js,Routing > +layout > +layout.server.js,/20-core-concepts/10-routing.md,"To run your layout's `load` function on the server, move it to `+layout.server.js`, and change the `LayoutLoad` type to `LayoutServerLoad`. Like `+layout.js`, `+layout.server.js` can export [page options](page-options) — `prerender`, `ssr` and `csr`. "
397e3d7e,634,+server,Routing > +server,/20-core-concepts/10-routing.md,"As well as pages, you can define routes with a `+server.js` file (sometimes referred to as an 'API route' or an 'endpoint'), which gives you full control over the response. Your `+server.js` file (or `+server.ts`) exports functions corresponding to HTTP verbs like `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, and `OPTIONS` that take a `RequestEvent` argument and return a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object. For example we could create an `/api/random-number` route with a `GET` handler: ```js
/// file: src/routes/api/random-number/+server.js
import { error } from '@sveltejs/kit';

/** @type {import('./$types').RequestHandler} */
export function GET({ url }) {
	const min = Number(url.searchParams.get('min') ?? '0');
	const max = Number(url.searchParams.get('max') ?? '1');

	const d = max - min;

	if (isNaN(d) || d < 0) {
		throw error(400, 'min and max must be numbers, and min must be less than max');
	}

	const random = min + Math.random() * d;

	return new Response(String(random));
}
``` The first argument to `Response` can be a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), making it possible to stream large amounts of data or create server-sent events (unless deploying to platforms that buffer responses, like AWS Lambda). You can use the [`error`](modules#sveltejs-kit-error), [`redirect`](modules#sveltejs-kit-redirect) and [`json`](modules#sveltejs-kit-json) methods from `@sveltejs/kit` for convenience (but you don't have to). If an error is thrown (either `throw error(...)` or an unexpected error), the response will be a JSON representation of the error or a fallback error page — which can be customised via `src/error.html` — depending on the `Accept` header. The [`+error.svelte`](#error) component will *not* be rendered in this case. You can read more about error handling [here](errors). > When creating an `OPTIONS` handler, note that Vite will inject `Access-Control-Allow-Origin` and `Access-Control-Allow-Methods` headers — these will not be present in production unless you add them. "
d102e502,367,Receiving data,Routing > +server > Receiving data,/20-core-concepts/10-routing.md,"By exporting `POST`/`PUT`/`PATCH`/`DELETE`/`OPTIONS` handlers, `+server.js` files can be used to create a complete API: ```svelte
/// file: src/routes/add/+page.svelte
<script>
	let a = 0;
	let b = 0;
	let total = 0;

	async function add() {
		const response = await fetch('/api/add', {
			method: 'POST',
			body: JSON.stringify({ a, b }),
			headers: {
				'content-type': 'application/json'
			}
		});

		total = await response.json();
	}
</script>

<input type=""number"" bind:value={a}> +
<input type=""number"" bind:value={b}> =
{total}

<button on:click={add}>Calculate</button>
``` ```js
/// file: src/routes/api/add/+server.js
import { json } from '@sveltejs/kit';

/** @type {import('./$types').RequestHandler} */
export async function POST({ request }) {
	const { a, b } = await request.json();
	return json(a + b);
}
``` > In general, [form actions](form-actions) are a better way to submit data from the browser to the server. "
88972697,152,Content negotiation,Routing > +server > Content negotiation,/20-core-concepts/10-routing.md,"`+server.js` files can be placed in the same directory as `+page` files, allowing the same route to be either a page or an API endpoint. To determine which, SvelteKit applies the following rules: *   `PUT`/`PATCH`/`DELETE`/`OPTIONS` requests are always handled by `+server.js` since they do not apply to pages
*   `GET`/`POST` requests are treated as page requests if the `accept` header prioritises `text/html` (in other words, it's a browser page request), else they are handled by `+server.js` "
b3e58be5,260,$types,Routing > $types,/20-core-concepts/10-routing.md,"Throughout the examples above, we've been importing types from a `$types.d.ts` file. This is a file SvelteKit creates for you in a hidden directory if you're using TypeScript (or JavaScript with JSDoc type annotations) to give you type safety when working with your root files. For example, annotating `export let data` with `PageData` (or `LayoutData`, for a `+layout.svelte` file) tells TypeScript that the type of `data` is whatever was returned from `load`: ```svelte
/// file: src/routes/blog/[slug]/+page.svelte
<script>
	/** @type {import('./$types').PageData} */
	export let data;
</script>
``` In turn, annotating the `load` function with `PageLoad`, `PageServerLoad`, `LayoutLoad` or `LayoutServerLoad` (for `+page.js`, `+page.server.js`, `+layout.js` and `+layout.server.js` respectively) ensures that `params` and the return value are correctly typed. "
65209120,68,Other files,Routing > Other files,/20-core-concepts/10-routing.md,"Any other files inside a route directory are ignored by SvelteKit. This means you can colocate components and utility modules with the routes that need them. If components and modules are needed by multiple routes, it's a good idea to put them in [`$lib`](modules#$lib). "
33423942,77,Loading data,Loading data,/20-core-concepts/20-load.md,"Before a [`+page.svelte`](routing#page-page-svelte) component (and its containing [`+layout.svelte`](routing#layout-layout-svelte) components) can be rendered, we often need to get some data. This is done by defining `load` functions. "
294282c2,595,Page data,Loading data > Page data,/20-core-concepts/20-load.md,"A `+page.svelte` file can have a sibling `+page.js` (or `+page.ts`) that exports a `load` function, the return value of which is available to the page via the `data` prop: ```js
/// file: src/routes/blog/[slug]/+page.js
/** @type {import('./$types').PageLoad} */
export function load({ params }) {
	return {
		post: {
			title: `Title for ${params.slug} goes here`,
			content: `Content for ${params.slug} goes here`
		}
	};
}
``` ```svelte
/// file: src/routes/blog/[slug]/+page.svelte
<script>
	/** @type {import('./$types').PageData} */
	export let data;
</script>

<h1>{data.post.title}</h1>
<div>{@html data.post.content}</div>
``` Thanks to the generated `$types` module, we get full type safety. A `load` function in a `+page.js` file runs both on the server and in the browser. If your `load` function should *always* run on the server (because it uses private environment variables, for example, or accesses a database) then it would go in a `+page.server.js` instead. A more realistic version of your blog post's `load` function, that only runs on the server and pulls data from a database, might look like this: ```js
/// file: src/routes/blog/[slug]/+page.server.js
// @filename: ambient.d.ts
declare module '$lib/server/database' {
	export function getPost(slug: string): Promise<{ title: string, content: string }>
}

// @filename: index.js
// 
import * as db from '$lib/server/database';

/** @type {import('./$types').PageServerLoad} */
export async function load({ params }) {
	return {
		post: await db.getPost(params.slug)
	};
}
``` Notice that the type changed from `PageLoad` to `PageServerLoad`, because server `load` functions can access additional arguments. To understand when to use `+page.js` and when to use `+page.server.js`, see [Universal vs server](load#universal-vs-server). "
57f0b3f0,729,Layout data,Loading data > Layout data,/20-core-concepts/20-load.md,"Your `+layout.svelte` files can also load data, via `+layout.js` or `+layout.server.js`. ```js
/// file: src/routes/blog/[slug]/+layout.server.js
// @filename: ambient.d.ts
declare module '$lib/server/database' {
	export function getPostSummaries(): Promise<Array<{ title: string, slug: string }>>
}

// @filename: index.js
// 
import * as db from '$lib/server/database';

/** @type {import('./$types').LayoutServerLoad} */
export async function load() {
	return {
		posts: await db.getPostSummaries()
	};
}
``` ```svelte
/// file: src/routes/blog/[slug]/+layout.svelte
<script>
	/** @type {import('./$types').LayoutData} */
	export let data;
</script>

<main>
	<!-- +page.svelte is rendered in this <slot> -->
	<slot />
</main>

<aside>
	<h2>More posts</h2>
	<ul>
		{#each data.posts as post}
			<li>
				<a href=""/blog/{post.slug}"">
					{post.title}
				</a>
			</li>
		{/each}
	</ul>
</aside>
``` Data returned from layout `load` functions is available to child `+layout.svelte` components and the `+page.svelte` component as well as the layout that it 'belongs' to. ```diff
/// file: src/routes/blog/[slug]/+page.svelte
<script>
+	import { page } from '$app/stores';

	/** @type {import('./$types').PageData} */
	export let data;

+	// we can access `data.posts` because it's returned from
+	// the parent layout `load` function
+	$: index = data.posts.findIndex(post => post.slug === $page.params.slug);
+	$: next = data.posts[index - 1];
</script>

<h1>{data.post.title}</h1>
<div>{@html data.post.content}</div>

+{#if next}
+	<p>Next post: <a href=""/blog/{next.slug}"">{next.title}</a></p>
+{/if}
``` > If multiple `load` functions return data with the same key, the last one 'wins' — the result of a layout `load` returning `{ a: 1, b: 2 }` and a page `load` returning `{ b: 3, c: 4 }` would be `{ a: 1, b: 3, c: 4 }`. "
5c147c14,219,$page.data,Loading data > $page.data,/20-core-concepts/20-load.md,"The `+page.svelte` component, and each `+layout.svelte` component above it, has access to its own data plus all the data from its parents. In some cases, we might need the opposite — a parent layout might need to access page data or data from a child layout. For example, the root layout might want to access a `title` property returned from a `load` function in `+page.js` or `+page.server.js`. This can be done with `$page.data`: ```svelte
/// file: src/routes/+layout.svelte
<script>
	import { page } from '$app/stores';
</script>

<svelte:head>
	<title>{$page.data.title}</title>
</svelte:head>
``` Type information for `$page.data` is provided by `App.PageData`. "
6a169f16,114,Universal vs server,Loading data > Universal vs server,/20-core-concepts/20-load.md,"As we've seen, there are two types of `load` function: *   `+page.js` and `+layout.js` files export *universal* `load` functions that run both on the server and in the browser
*   `+page.server.js` and `+layout.server.js` files export *server* `load` functions that only run server-side Conceptually, they're the same thing, but there are some important differences to be aware of. "
a0061206,197,Input,Loading data > Universal vs server > Input,/20-core-concepts/20-load.md,"Both universal and server `load` functions have access to properties describing the request (`params`, `route` and `url`) and various functions (`fetch`, `setHeaders`, `parent` and `depends`). These are described in the following sections. Server `load` functions are called with a `ServerLoadEvent`, which inherits `clientAddress`, `cookies`, `locals`, `platform` and `request` from `RequestEvent`. Universal `load` functions are called with a `LoadEvent`, which has a `data` property. If you have `load` functions in both `+page.js` and `+page.server.js` (or `+layout.js` and `+layout.server.js`), the return value of the server `load` function is the `data` property of the universal `load` function's argument. "
8ebb30bb,142,Output,Loading data > Universal vs server > Output,/20-core-concepts/20-load.md,"A universal `load` function can return an object containing any values, including things like custom classes and component constructors. A server `load` function must return data that can be serialized with [devalue](https://github.com/rich-harris/devalue) — anything that can be represented as JSON plus things like `BigInt`, `Date`, `Map`, `Set` and `RegExp`, or repeated/cyclical references — so that it can be transported over the network. Your data can include [promises](#streaming-with-promises), in which case it will be streamed to browsers. "
5fda19da,150,When to use which,Loading data > Universal vs server > When to use which,/20-core-concepts/20-load.md,"Server `load` functions are convenient when you need to access data directly from a database or filesystem, or need to use private environment variables. Universal `load` functions are useful when you need to `fetch` data from an external API and don't need private credentials, since SvelteKit can get the data directly from the API rather than going via your server. They are also useful when you need to return something that can't be serialized, such as a Svelte component constructor. In rare cases, you might need to use both together — for example, you might need to return an instance of a custom class that was initialised with data from your server. "
db38b538,45,Using URL data,Loading data > Using URL data,/20-core-concepts/20-load.md,"Often the `load` function depends on the URL in one way or another. For this, the `load` function provides you with `url`, `route` and `params`. "
9c50b450,177,url,Loading data > Using URL data > url,/20-core-concepts/20-load.md,"An instance of [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL), containing properties like the `origin`, `hostname`, `pathname` and `searchParams` (which contains the parsed query string as a [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) object). `url.hash` cannot be accessed during `load`, since it is unavailable on the server. > In some environments this is derived from request headers during server-side rendering. If you're using [adapter-node](adapter-node), for example, you may need to configure the adapter in order for the URL to be correct. "
22b576b5,106,route,Loading data > Using URL data > route,/20-core-concepts/20-load.md,"Contains the name of the current route directory, relative to `src/routes`: ```js
/// file: src/routes/a/[b]/[...c]/+page.js
/** @type {import('./$types').PageLoad} */
export function load({ route }) {
	console.log(route.id); // '/a/[b]/[...c]'
}
``` "
4112ec12,106,params,Loading data > Using URL data > params,/20-core-concepts/20-load.md,"`params` is derived from `url.pathname` and `route.id`. Given a `route.id` of `/a/[b]/[...c]` and a `url.pathname` of `/a/x/y/z`, the `params` object would look like this: ```json
{
	""b"": ""x"",
	""c"": ""y/z""
}
``` "
8c320c32,419,Making fetch requests,Loading data > Making fetch requests,/20-core-concepts/20-load.md,"To get data from an external API or a `+server.js` handler, you can use the provided `fetch` function, which behaves identically to the [native `fetch` web API](https://developer.mozilla.org/en-US/docs/Web/API/fetch) with a few additional features: *   it can be used to make credentialed requests on the server, as it inherits the `cookie` and `authorization` headers for the page request
*   it can make relative requests on the server (ordinarily, `fetch` requires a URL with an origin when used in a server context)
*   internal requests (e.g. for `+server.js` routes) go direct to the handler function when running on the server, without the overhead of an HTTP call
*   during server-side rendering, the response will be captured and inlined into the rendered HTML. Note that headers will *not* be serialized, unless explicitly included via [`filterSerializedResponseHeaders`](hooks#server-hooks-handle). Then, during hydration, the response will be read from the HTML, guaranteeing consistency and preventing an additional network request - if you got a warning in your browser console when using the browser `fetch` instead of the `load` `fetch`, this is why. ```js
/// file: src/routes/items/[id]/+page.js
/** @type {import('./$types').PageLoad} */
export async function load({ fetch, params }) {
	const res = await fetch(`/api/items/${params.id}`);
	const item = await res.json();

	return { item };
}
``` > Cookies will only be passed through if the target host is the same as the SvelteKit application or a more specific subdomain of it. "
5ad7aad7,558,Cookies and headers,Loading data > Cookies and headers,/20-core-concepts/20-load.md,"A server `load` function can get and set [`cookies`](types#public-types-cookies). ```js
/// file: src/routes/+layout.server.js
// @filename: ambient.d.ts
declare module '$lib/server/database' {
	export function getUser(sessionid: string | undefined): Promise<{ name: string, avatar: string }>
}

// @filename: index.js
// 
import * as db from '$lib/server/database';

/** @type {import('./$types').LayoutServerLoad} */
export async function load({ cookies }) {
	const sessionid = cookies.get('sessionid');

	return {
		user: await db.getUser(sessionid)
	};
}
``` > When setting cookies, be aware of the `path` property. By default, the `path` of a cookie is the current pathname. If you for example set a cookie at page `admin/user`, the cookie will only be available within the `admin` pages by default. In most cases you likely want to set `path` to `'/'` to make the cookie available throughout your app. Both server and universal `load` functions have access to a `setHeaders` function that, when running on the server, can set headers for the response. (When running in the browser, `setHeaders` has no effect.) This is useful if you want the page to be cached, for example: ```js
// @errors: 2322 1360
/// file: src/routes/products/+page.js
/** @type {import('./$types').PageLoad} */
export async function load({ fetch, setHeaders }) {
	const url = `https://cms.example.com/products.json`;
	const response = await fetch(url);

	// cache the page for the same length of time
	// as the underlying data
	setHeaders({
		age: response.headers.get('age'),
		'cache-control': response.headers.get('cache-control')
	});

	return response.json();
}
``` Setting the same header multiple times (even in separate `load` functions) is an error — you can only set a given header once. You cannot add a `set-cookie` header with `setHeaders` — use `cookies.set(name, value, options)` instead. "
d7145314,625,Using parent data,Loading data > Using parent data,/20-core-concepts/20-load.md,"Occasionally it's useful for a `load` function to access data from a parent `load` function, which can be done with `await parent()`: ```js
/// file: src/routes/+layout.js
/** @type {import('./$types').LayoutLoad} */
export function load() {
	return { a: 1 };
}
``` ```js
/// file: src/routes/abc/+layout.js
/** @type {import('./$types').LayoutLoad} */
export async function load({ parent }) {
	const { a } = await parent();
	return { b: a + 1 };
}
``` ```js
/// file: src/routes/abc/+page.js
/** @type {import('./$types').PageLoad} */
export async function load({ parent }) {
	const { a, b } = await parent();
	return { c: a + b };
}
``` ```svelte
/// file: src/routes/abc/+page.svelte
<script>
	/** @type {import('./$types').PageData} */
	export let data;
</script>

<!-- renders `1 + 2 = 3` -->
<p>{data.a} + {data.b} = {data.c}</p>
``` > Notice that the `load` function in `+page.js` receives the merged data from both layout `load` functions, not just the immediate parent. Inside `+page.server.js` and `+layout.server.js`, `parent` returns data from parent `+layout.server.js` files. In `+page.js` or `+layout.js` it will return data from parent `+layout.js` files. However, a missing `+layout.js` is treated as a `({ data }) => data` function, meaning that it will also return data from parent `+layout.server.js` files that are not 'shadowed' by a `+layout.js` file Take care not to introduce waterfalls when using `await parent()`. Here, for example, `getData(params)` does not depend on the result of calling `parent()`, so we should call it first to avoid a delayed render. ```diff
/// file: +page.js
/** @type {import('./$types').PageLoad} */
export async function load({ params, parent }) {
-	const parentData = await parent();
	const data = await getData(params);
+	const parentData = await parent();

	return {
		...data
		meta: { ...parentData.meta, ...data.meta }
	};
}
``` "
4da539a5,297,Errors,Loading data > Errors,/20-core-concepts/20-load.md,"If an error is thrown during `load`, the nearest [`+error.svelte`](routing#error) will be rendered. For *expected* errors, use the `error` helper from `@sveltejs/kit` to specify the HTTP status code and an optional message: ```js
/// file: src/routes/admin/+layout.server.js
// @filename: ambient.d.ts
declare namespace App {
	interface Locals {
		user?: {
			name: string;
			isAdmin: boolean;
		}
	}
}

// @filename: index.js
// 
import { error } from '@sveltejs/kit';

/** @type {import('./$types').LayoutServerLoad} */
export function load({ locals }) {
	if (!locals.user) {
		throw error(401, 'not logged in');
	}

	if (!locals.user.isAdmin) {
		throw error(403, 'not an admin');
	}
}
``` If an *unexpected* error is thrown, SvelteKit will invoke [`handleError`](hooks#shared-hooks-handleerror) and treat it as a 500 Internal Error. "
e62bee2b,267,Redirects,Loading data > Redirects,/20-core-concepts/20-load.md,"To redirect users, use the `redirect` helper from `@sveltejs/kit` to specify the location to which they should be redirected alongside a `3xx` status code. ```js
/// file: src/routes/user/+layout.server.js
// @filename: ambient.d.ts
declare namespace App {
	interface Locals {
		user?: {
			name: string;
		}
	}
}

// @filename: index.js
// 
import { redirect } from '@sveltejs/kit';

/** @type {import('./$types').LayoutServerLoad} */
export function load({ locals }) {
	if (!locals.user) {
		throw redirect(307, '/login');
	}
}
``` > Make sure you're not catching the thrown redirect, which would prevent SvelteKit from handling it. In the browser, you can also navigate programmatically outside of a `load` function using [`goto`](modules#$app-navigation-goto) from [`$app.navigation`](modules#$app-navigation). "
5ec30ec3,474,Streaming with promises,Loading data > Streaming with promises,/20-core-concepts/20-load.md,"Promises at the *top level* of the returned object will be awaited, making it easy to return multiple promises without creating a waterfall. When using a server `load`, *nested* promises will be streamed to the browser as they resolve. This is useful if you have slow, non-essential data, since you can start rendering the page before all the data is available: ```js
/// file: src/routes/+page.server.js
/** @type {import('./$types').PageServerLoad} */
export function load() {
	return {
		one: Promise.resolve(1),
		two: Promise.resolve(2),
		streamed: {
			three: new Promise((fulfil) => {
				setTimeout(() => {
					fulfil(3)
				}, 1000);
			})
		}
	};
}
``` This is useful for creating skeleton loading states, for example: ```svelte
/// file: src/routes/+page.svelte
<script>
	/** @type {import('./$types').PageData} */
	export let data;
</script>

<p>
	one: {data.one}
</p>
<p>
	two: {data.two}
</p>
<p>
	three:
	{#await data.streamed.three}
		Loading...
	{:then value}
		{value}
	{:catch error}
		{error.message}
	{/await}
</p>
``` On platforms that do not support streaming, such as AWS Lambda, responses will be buffered. This means the page will only render once all promises resolve. > Streaming data will only work when JavaScript is enabled. You should avoid returning nested promises from a universal `load` function if the page is server rendered, as these are *not* streamed — instead, the promise is recreated when the function re-runs in the browser. "
f307a707,72,Parallel loading,Loading data > Parallel loading,/20-core-concepts/20-load.md,"When rendering (or navigating to) a page, SvelteKit runs all `load` functions concurrently, avoiding a waterfall of requests. During client-side navigation, the result of calling multiple server `load` functions are grouped into a single response. Once all `load` functions have returned, the page is rendered. "
d117d517,575,Invalidation,Loading data > Invalidation,/20-core-concepts/20-load.md,"SvelteKit tracks the dependencies of each `load` function to avoid re-running it unnecessarily during navigation. For example, given a pair of `load` functions like these... ```js
/// file: src/routes/blog/[slug]/+page.server.js
// @filename: ambient.d.ts
declare module '$lib/server/database' {
	export function getPost(slug: string): Promise<{ title: string, content: string }>
}

// @filename: index.js
// 
import * as db from '$lib/server/database';

/** @type {import('./$types').PageServerLoad} */
export async function load({ params }) {
	return {
		post: await db.getPost(params.slug)
	};
}
``` ```js
/// file: src/routes/blog/[slug]/+layout.server.js
// @filename: ambient.d.ts
declare module '$lib/server/database' {
	export function getPostSummaries(): Promise<Array<{ title: string, slug: string }>>
}

// @filename: index.js
// 
import * as db from '$lib/server/database';

/** @type {import('./$types').LayoutServerLoad} */
export async function load() {
	return {
		posts: await db.getPostSummaries()
	};
}
``` ...the one in `+page.server.js` will re-run if we navigate from `/blog/trying-the-raw-meat-diet` to `/blog/i-regret-my-choices` because `params.slug` has changed. The one in `+layout.server.js` will not, because the data is still valid. In other words, we won't call `db.getPostSummaries()` a second time. A `load` function that calls `await parent()` will also re-run if a parent `load` function is re-run. Dependency tracking does not apply *after* the `load` function has returned — for example, accessing `params.x` inside a nested [promise](#streaming-with-promises) will not cause the function to re-run when `params.x` changes. (Don't worry, you'll get a warning in development if you accidentally do this.) Instead, access the parameter in the main body of your `load` function. "
eccfbccf,817,Manual invalidation,Loading data > Invalidation > Manual invalidation,/20-core-concepts/20-load.md,"You can also re-run `load` functions that apply to the current page using [`invalidate(url)`](modules#$app-navigation-invalidate), which re-runs all `load` functions that depend on `url`, and [`invalidateAll()`](modules#$app-navigation-invalidateall), which re-runs every `load` function. A `load` function depends on `url` if it calls `fetch(url)` or `depends(url)`. Note that `url` can be a custom identifier that starts with `[a-z]:`: ```js
/// file: src/routes/random-number/+page.js
/** @type {import('./$types').PageLoad} */
export async function load({ fetch, depends }) {
	// load reruns when `invalidate('https://api.example.com/random-number')` is called...
	const response = await fetch('https://api.example.com/random-number');

	// ...or when `invalidate('app:random')` is called
	depends('app:random');

	return {
		number: await response.json()
	};
}
``` ```svelte
/// file: src/routes/random-number/+page.svelte
<script>
	import { invalidate, invalidateAll } from '$app/navigation';

	/** @type {import('./$types').PageData} */
	export let data;

	function rerunLoadFunction() {
		// any of these will cause the `load` function to re-run
		invalidate('app:random');
		invalidate('https://api.example.com/random-number');
		invalidate(url => url.href.includes('random-number'));
		invalidateAll();
	}
</script>

<p>random number: {data.number}</p>
<button on:click={rerunLoadFunction}>Update random number</button>
``` To summarize, a `load` function will re-run in the following situations: *   It references a property of `params` whose value has changed
*   It references a property of `url` (such as `url.pathname` or `url.search`) whose value has changed
*   It calls `await parent()` and a parent `load` function re-ran
*   It declared a dependency on a specific URL via [`fetch`](#making-fetch-requests) or [`depends`](types#public-types-loadevent), and that URL was marked invalid with [`invalidate(url)`](modules#$app-navigation-invalidate)
*   All active `load` functions were forcibly re-run with [`invalidateAll()`](modules#$app-navigation-invalidateall) Note that re-running a `load` function will update the `data` prop inside the corresponding `+layout.svelte` or `+page.svelte`; it does *not* cause the component to be recreated. As a result, internal state is preserved. If this isn't what you want, you can reset whatever you need to reset inside an [`afterNavigate`](modules#$app-navigation-afternavigate) callback, and/or wrap your component in a [`{#key ...}`](https://svelte.dev/docs#template-syntax-key) block. "
cae05ce0,61,Shared state,Loading data > Shared state,/20-core-concepts/20-load.md,"In many server environments, a single instance of your app will serve multiple users. For that reason, per-request or per-user state must not be stored in shared variables outside your `load` functions, but should instead be stored in `event.locals`. "
d9d12dd1,74,Form actions,Form actions,/20-core-concepts/30-form-actions.md,"A `+page.server.js` file can export *actions*, which allow you to `POST` data to the server using the `<form>` element. When using `<form>`, client-side JavaScript is optional, but you can easily *progressively enhance* your form interactions with JavaScript to provide the best user experience. "
fd777d7,346,Default actions,Form actions > Default actions,/20-core-concepts/30-form-actions.md,"In the simplest case, a page declares a `default` action: ```js
/// file: src/routes/login/+page.server.js
/** @type {import('./$types').Actions} */
export const actions = {
	default: async (event) => {
		// TODO log the user in
	}
};
``` To invoke this action from the `/login` page, just add a `<form>` — no JavaScript needed: ```svelte
/// file: src/routes/login/+page.svelte
<form method=""POST"">
	<label>
		Email
		<input name=""email"" type=""email"">
	</label>
	<label>
		Password
		<input name=""password"" type=""password"">
	</label>
	<button>Log in</button>
</form>
``` If someone were to click the button, the browser would send the form data via `POST` request to the server, running the default action. > Actions always use `POST` requests, since `GET` requests should never have side-effects. We can also invoke the action from other pages (for example if there's a login widget in the nav in the root layout) by adding the `action` attribute, pointing to the page: ```html
/// file: src/routes/+layout.svelte
<form method=""POST"" action=""/login"">
	<!-- content -->
</form>
``` "
5413d813,449,Named actions,Form actions > Named actions,/20-core-concepts/30-form-actions.md,"Instead of one `default` action, a page can have as many named actions as it needs: ```diff
/// file: src/routes/login/+page.server.js
/** @type {import('./$types').Actions} */
export const actions = {
-	default: async (event) => {
+	login: async (event) => {
		// TODO log the user in
	},
+	register: async (event) => {
+		// TODO register the user
+	}
};
``` To invoke a named action, add a query parameter with the name prefixed by a `/` character: ```svelte
/// file: src/routes/login/+page.svelte
<form method=""POST"" action=""?/register"">
``` ```svelte
/// file: src/routes/+layout.svelte
<form method=""POST"" action=""/login?/register"">
``` As well as the `action` attribute, we can use the `formaction` attribute on a button to `POST` the same form data to a different action than the parent `<form>`: ```diff
/// file: src/routes/login/+page.svelte
-<form method=""POST"">
+<form method=""POST"" action=""?/login"">
	<label>
		Email
		<input name=""email"" type=""email"">
	</label>
	<label>
		Password
		<input name=""password"" type=""password"">
	</label>
	<button>Log in</button>
+	<button formaction=""?/register"">Register</button>
</form>
``` > We can't have default actions next to named actions, because if you POST to a named action without a redirect, the query parameter is persisted in the URL, which means the next default POST would go through the named action from before. "
e6524a52,468,Anatomy of an action,Form actions > Anatomy of an action,/20-core-concepts/30-form-actions.md,"Each action receives a `RequestEvent` object, allowing you to read the data with `request.formData()`. After processing the request (for example, logging the user in by setting a cookie), the action can respond with data that will be available through the `form` property on the corresponding page and through `$page.form` app-wide until the next update. ```js
// @errors: 2304
/// file: src/routes/login/+page.server.js
/** @type {import('./$types').PageServerLoad} */
export async function load({ cookies }) {
	const user = await db.getUserFromSession(cookies.get('sessionid'));
	return { user };
}

/** @type {import('./$types').Actions} */
export const actions = {
	login: async ({ cookies, request }) => {
		const data = await request.formData();
		const email = data.get('email');
		const password = data.get('password');

		const user = await db.getUser(email);
		cookies.set('sessionid', await db.createSession(user));

		return { success: true };
	},
	register: async (event) => {
		// TODO register the user
	}
};
``` ```svelte
/// file: src/routes/login/+page.svelte
<script>
	/** @type {import('./$types').PageData} */
	export let data;

	/** @type {import('./$types').ActionData} */
	export let form;
</script>

{#if form?.success}
	<!-- this message is ephemeral; it exists because the page was rendered in
	       response to a form submission. it will vanish if the user reloads -->
	<p>Successfully logged in! Welcome back, {data.user.name}</p>
{/if}
``` "
3a5ea25e,635,Validation errors,Form actions > Anatomy of an action > Validation errors,/20-core-concepts/30-form-actions.md,"If the request couldn't be processed because of invalid data, you can return validation errors — along with the previously submitted form values — back to the user so that they can try again. The `fail` function lets you return an HTTP status code (typically 400 or 422, in the case of validation errors) along with the data. The status code is available through `$page.status` and the data through `form`: ```diff
/// file: src/routes/login/+page.server.js
+import { fail } from '@sveltejs/kit';

/** @type {import('./$types').Actions} */
export const actions = {
	login: async ({ cookies, request }) => {
		const data = await request.formData();
		const email = data.get('email');
		const password = data.get('password');

+		if (!email) {
+			return fail(400, { email, missing: true });
+		}

		const user = await db.getUser(email);

+		if (!user || user.password !== hash(password)) {
+			return fail(400, { email, incorrect: true });
+		}

		cookies.set('sessionid', await db.createSession(user));

		return { success: true };
	},
	register: async (event) => {
		// TODO register the user
	}
};
``` > Note that as a precaution, we only return the email back to the page — not the password. ```diff
/// file: src/routes/login/+page.svelte
<form method=""POST"" action=""?/login"">
+	{#if form?.missing}<p class=""error"">The email field is required</p>{/if}
+	{#if form?.incorrect}<p class=""error"">Invalid credentials!</p>{/if}
	<label>
		Email
-		<input name=""email"" type=""email"">
+		<input name=""email"" type=""email"" value={form?.email ?? ''}>
	</label>
	<label>
		Password
		<input name=""password"" type=""password"">
	</label>
	<button>Log in</button>
	<button formaction=""?/register"">Register</button>
</form>
``` The returned data must be serializable as JSON. Beyond that, the structure is entirely up to you. For example, if you had multiple forms on the page, you could distinguish which `<form>` the returned `form` data referred to with an `id` property or similar. "
e1e1dfe1,333,Redirects,Form actions > Anatomy of an action > Redirects,/20-core-concepts/30-form-actions.md,"Redirects (and errors) work exactly the same as in [`load`](load#redirects): ```diff
/// file: src/routes/login/+page.server.js
+import { fail, redirect } from '@sveltejs/kit';

/** @type {import('./$types').Actions} */
export const actions = {
+	login: async ({ cookies, request, url }) => {
		const data = await request.formData();
		const email = data.get('email');
		const password = data.get('password');

		const user = await db.getUser(email);
		if (!user) {
			return fail(400, { email, missing: true });
		}

		if (user.password !== hash(password)) {
			return fail(400, { email, incorrect: true });
		}

		cookies.set('sessionid', await db.createSession(user));

+		if (url.searchParams.has('redirectTo')) {
+			throw redirect(303, url.searchParams.get('redirectTo'));
+		}

		return { success: true };
	},
	register: async (event) => {
		// TODO register the user
	}
};
``` "
6095d495,509,Loading data,Form actions > Loading data,/20-core-concepts/30-form-actions.md,"After an action runs, the page will be re-rendered (unless a redirect or an unexpected error occurs), with the action's return value available to the page as the `form` prop. This means that your page's `load` functions will run after the action completes. Note that `handle` runs before the action is invoked, and does not re-run before the `load` functions. This means that if, for example, you use `handle` to populate `event.locals` based on a cookie, you must update `event.locals` when you set or delete the cookie in an action: ```js
/// file: src/hooks.server.js
// @filename: ambient.d.ts
declare namespace App {
	interface Locals {
		user: {
			name: string;
		} | null
	}
}

// @filename: global.d.ts
declare global {
	function getUser(sessionid: string | undefined): {
		name: string;
	};
}

export {};

// @filename: index.js
// 
/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	event.locals.user = await getUser(event.cookies.get('sessionid'));
	return resolve(event);
}
``` ```js
/// file: src/routes/account/+page.server.js
// @filename: ambient.d.ts
declare namespace App {
	interface Locals {
		user: {
			name: string;
		} | null
	}
}

// @filename: index.js
// 
/** @type {import('./$types').PageServerLoad} */
export function load(event) {
	return {
		user: event.locals.user
	};
}

/** @type {import('./$types').Actions} */
export const actions = {
	logout: async (event) => {
		event.cookies.delete('sessionid');
		event.locals.user = null;
	}
};
``` "
efd482d4,82,Progressive enhancement,Form actions > Progressive enhancement,/20-core-concepts/30-form-actions.md,"In the preceding sections we built a `/login` action that [works without client-side JavaScript](https://kryogenix.org/code/browser/everyonehasjs.html) — not a `fetch` in sight. That's great, but when JavaScript *is* available we can progressively enhance our form interactions to provide a better user experience. "
88ad7ead,594,use:enhance,Form actions > Progressive enhancement > use:enhance,/20-core-concepts/30-form-actions.md,"The easiest way to progressively enhance a form is to add the `use:enhance` action: ```diff
/// file: src/routes/login/+page.svelte
<script>
+	import { enhance } from '$app/forms';

	/** @type {import('./$types').ActionData} */
	export let form;
</script>

+<form method=""POST"" use:enhance>
``` > Yes, it's a little confusing that the `enhance` action and `<form action>` are both called 'action'. These docs are action-packed. Sorry. Without an argument, `use:enhance` will emulate the browser-native behaviour, just without the full-page reloads. It will: *   update the `form` property, `$page.form` and `$page.status` on a successful or invalid response, but only if the action is on the same page you're submitting from. So for example if your form looks like `<form action=""/somewhere/else"" ..>`, `form` and `$page` will *not* be updated. This is because in the native form submission case you would be redirected to the page the action is on.
*   reset the `<form>` element and invalidate all data using `invalidateAll` on a successful response
*   call `goto` on a redirect response
*   render the nearest `+error` boundary if an error occurs
*   [reset focus](accessibility#focus-management) to the appropriate element To customise the behaviour, you can provide a `SubmitFunction` that runs immediately before the form is submitted, and (optionally) returns a callback that runs with the `ActionResult`. Note that if you return a callback, the default behavior mentioned above is not triggered. To get it back, call `update`. ```svelte
<form
	method=""POST""
	use:enhance={({ form, data, action, cancel }) => {
		// `form` is the `<form>` element
		// `data` is its `FormData` object
		// `action` is the URL to which the form is posted
		// `cancel()` will prevent the submission

		return async ({ result, update }) => {
			// `result` is an `ActionResult` object
			// `update` is a function which triggers the logic that would be triggered if this callback wasn't set
		};
	}}
>
``` You can use these functions to show and hide loading UI, and so on. "
9189e989,441,applyAction,Form actions > Progressive enhancement > applyAction,/20-core-concepts/30-form-actions.md,"If you provide your own callbacks, you may need to reproduce part of the default `use:enhance` behaviour, such as showing the nearest `+error` boundary. Most of the time, calling `update` passed to the callback is enough. If you need more customization you can do so with `applyAction`: ```diff
/// file: src/routes/login/+page.svelte
<script>
+	import { enhance, applyAction } from '$app/forms';

	/** @type {import('./$types').ActionData} */
	export let form;
</script>

<form
	method=""POST""
	use:enhance={({ form, data, action, cancel }) => {
		// `form` is the `<form>` element
		// `data` is its `FormData` object
		// `action` is the URL to which the form is posted
		// `cancel()` will prevent the submission

		return async ({ result }) => {
			// `result` is an `ActionResult` object
+			if (result.type === 'error') {
+				await applyAction(result);
+			}
		};
	}}
>
``` The behaviour of `applyAction(result)` depends on `result.type`: *   `success`, `failure` — sets `$page.status` to `result.status` and updates `form` and `$page.form` to `result.data` (regardless of where you are submitting from, in contrast to `update` from `enhance`)
*   `redirect` — calls `goto(result.location)`
*   `error` — renders the nearest `+error` boundary with `result.error` In all cases, [focus will be reset](accessibility#focus-management). "
556e376e,508,Custom event listener,Form actions > Progressive enhancement > Custom event listener,/20-core-concepts/30-form-actions.md,"We can also implement progressive enhancement ourselves, without `use:enhance`, with a normal event listener on the `<form>`: ```svelte
/// file: src/routes/login/+page.svelte
<script>
	import { invalidateAll, goto } from '$app/navigation';
	import { applyAction, deserialize } from '$app/forms';

	/** @type {import('./$types').ActionData} */
	export let form;

	/** @type {any} */
	let error;

	async function handleSubmit(event) {
		const data = new FormData(this);

		const response = await fetch(this.action, {
			method: 'POST',
			body: data
		});

		/** @type {import('@sveltejs/kit').ActionResult} */
		const result = deserialize(await response.text());

		if (result.type === 'success') {
			// re-run all `load` functions, following the successful update
			await invalidateAll();
		}

		applyAction(result);
	}
</script>

<form method=""POST"" on:submit|preventDefault={handleSubmit}>
	<!-- content -->
</form>
``` Note that you need to `deserialize` the response before processing it further using the corresponding method from `$app/forms`. `JSON.parse()` isn't enough because form actions - like `load` functions - also support returning `Date` or `BigInt` objects. If you have a `+server.js` alongside your `+page.server.js`, `fetch` requests will be routed there by default. To `POST` to an action in `+page.server.js` instead, use the custom `x-sveltekit-action` header: ```diff
const response = await fetch(this.action, {
	method: 'POST',
	body: data,
+	headers: {
+		'x-sveltekit-action': 'true'
+	}
});
``` "
b28d5a8d,56,Alternatives,Form actions > Alternatives,/20-core-concepts/30-form-actions.md,"Form actions are the preferred way to send data to the server, since they can be progressively enhanced, but you can also use [`+server.js`](routing#server) files to expose (for example) a JSON API. "
2ce622e6,252,GET vs POST,Form actions > GET vs POST,/20-core-concepts/30-form-actions.md,"As we've seen, to invoke a form action you must use `method=""POST""`. Some forms don't need to `POST` data to the server — search inputs, for example. For these you can use `method=""GET""` (or, equivalently, no `method` at all), and SvelteKit will treat them like `<a>` elements, using the client-side router instead of a full page navigation: ```html
<form action=""/search"">
	<label>
		Search
		<input name=""q"">
	</label>
</form>
``` Submitting this form will navigate to `/search?q=...` and invoke your load function but will not invoke an action. As with `<a>` elements, you can set the [`data-sveltekit-reload`](link-options#data-sveltekit-reload) and [`data-sveltekit-noscroll`](link-options#data-sveltekit-noscroll) attributes on the `<form>` to control the router's behaviour. "
b8c3eec3,334,Page options,Page options,/20-core-concepts/40-page-options.md,"By default, SvelteKit will render (or [prerender](glossary#prerendering)) any component first on the server and send it to the client as HTML. It will then render the component again in the browser to make it interactive in a process called [**hydration**](glossary#hydration). For this reason, you need to ensure that components can run in both places. SvelteKit will then initialize a [**router**](routing) that takes over subsequent navigations. You can control each of these on a page-by-page basis by exporting options from [`+page.js`](routing#page-page-js) or [`+page.server.js`](routing#page-page-server-js), or for groups of pages using a shared [`+layout.js`](routing#layout-layout-js) or [`+layout.server.js`](routing#layout-layout-server-js). To define an option for the whole app, export it from the root layout. Child layouts and pages override values set in parent layouts, so — for example — you can enable prerendering for your entire app then disable it for pages that need to be dynamically rendered. You can mix and match these options in different areas of your app. For example you could prerender your marketing page for maximum speed, server-render your dynamic pages for SEO and accessibility and turn your admin section into an SPA by rendering it on the client only. This makes SvelteKit very versatile. "
4d1b111b,504,prerender,Page options > prerender,/20-core-concepts/40-page-options.md,"It's likely that at least some routes of your app can be represented as a simple HTML file generated at build time. These routes can be [*prerendered*](glossary#prerendering). ```js
/// file: +page.js/+page.server.js/+server.js
export const prerender = true;
``` Alternatively, you can set `export const prerender = true` in your root `+layout.js` or `+layout.server.js` and prerender everything except pages that are explicitly marked as *not* prerenderable: ```js
/// file: +page.js/+page.server.js/+server.js
export const prerender = false;
``` Routes with `prerender = true` will be excluded from manifests used for dynamic SSR, making your server (or serverless/edge functions) smaller. In some cases you might want to prerender a route but also include it in the manifest (for example, with a route like `/blog/[slug]` where you want to prerender your most recent/popular content but server-render the long tail) — for these cases, there's a third option, 'auto': ```js
/// file: +page.js/+page.server.js/+server.js
export const prerender = 'auto';
``` > If your entire app is suitable for prerendering, you can use [`adapter-static`](https://github.com/sveltejs/kit/tree/master/packages/adapter-static), which will output files suitable for use with any static webserver. The prerenderer will start at the root of your app and generate files for any prerenderable pages or `+server.js` routes it finds. Each page is scanned for `<a>` elements that point to other pages that are candidates for prerendering — because of this, you generally don't need to specify which pages should be accessed. If you *do* need to specify which pages should be accessed by the prerenderer, you can do so with the `entries` option in the [prerender configuration](configuration#prerender). While prerendering, the value of `building` imported from [`$app/environment`](modules#$app-environment) will be `true`. "
43418541,195,Prerendering server routes,Page options > prerender > Prerendering server routes,/20-core-concepts/40-page-options.md,"Unlike the other page options, `prerender` also applies to `+server.js` files. These files are *not* affected from layouts, but will inherit default values from the pages that fetch data from them, if any. For example if a `+page.js` contains this `load` function... ```js
/// file: +page.js
export const prerender = true;

/** @type {import('./$types').PageLoad} */
export async function load({ fetch }) {
	const res = await fetch('/my-server-route.json');
	return await res.json();
}
``` ...then `src/routes/my-server-route.json/+server.js` will be treated as prerenderable if it doesn't contain its own `export const prerender = false`. "
8c987818,230,When not to prerender,Page options > prerender > When not to prerender,/20-core-concepts/40-page-options.md,"The basic rule is this: for a page to be prerenderable, any two users hitting it directly must get the same content from the server. > Not all pages are suitable for prerendering. Any content that is prerendered will be seen by all users. You can of course fetch personalized data in `onMount` in a prerendered page, but this may result in a poorer user experience since it will involve blank initial content or loading indicators. Note that you can still prerender pages that load data based on the page's parameters, such as a `src/routes/blog/[slug]/+page.svelte` route. Accessing [`url.searchParams`](load#using-url-data-url) during prerendering is forbidden. If you need to use it, ensure you are only doing so in the browser (for example in `onMount`). Pages with [actions](form-actions) cannot be prerendered, because a server must be able to handle the action `POST` requests. "
ff7fd67f,75,Prerender and ssr,Page options > prerender > Prerender and ssr,/20-core-concepts/40-page-options.md,"If you set the [ssr option](#ssr) to `false`, each request will result in the same empty HTML shell. Since this would result in unnecessary work, SvelteKit defaults to prerendering any pages it finds where `prerender` is not explicitly set to `false`. "
a91f903f,215,Route conflicts,Page options > prerender > Route conflicts,/20-core-concepts/40-page-options.md,"Because prerendering writes to the filesystem, it isn't possible to have two endpoints that would cause a directory and a file to have the same name. For example, `src/routes/foo/+server.js` and `src/routes/foo/bar/+server.js` would try to create `foo` and `foo/bar`, which is impossible. For that reason among others, it's recommended that you always include a file extension — `src/routes/foo.json/+server.js` and `src/routes/foo/bar.json/+server.js` would result in `foo.json` and `foo/bar.json` files living harmoniously side-by-side. For *pages*, we skirt around this problem by writing `foo/index.html` instead of `foo`. Note that this will disable client-side routing for any navigation from this page, regardless of whether the router is already active. "
73582e58,276,Troubleshooting,Page options > prerender > Troubleshooting,/20-core-concepts/40-page-options.md,"If you encounter an error like 'The following routes were marked as prerenderable, but were not prerendered' it's because the route in question (or a parent layout, if it's a page) has `export const prerender = true` but the page wasn't actually prerendered, because it wasn't reached by the prerendering crawler. Since these routes cannot be dynamically server-rendered, this will cause errors when people try to access the route in question. There are two ways to fix it: *   Ensure that SvelteKit can find the route by following links from [`config.kit.prerender.entries`](configuration#prerender). Add links to dynamic routes (i.e. pages with `[parameters]` ) to this option if they are not found through crawling the other entry points, else they are not prerendered because SvelteKit doesn't know what value the parameters should have. Pages not marked as prerenderable will be ignored and their links to other pages will not be crawled, even if some of them would be prerenderable.
*   Change `export const prerender = true` to `export const prerender = 'auto'`. Routes with `'auto'` can be dynamically server rendered "
9d4468c4,176,ssr,Page options > ssr,/20-core-concepts/40-page-options.md,"Normally, SvelteKit renders your page on the server first and sends that HTML to the client where it's [hydrated](glossary#hydration). If you set `ssr` to `false`, it renders an empty 'shell' page instead. This is useful if your page is unable to be rendered on the server (because you use browser-only globals like `document` for example), but in most situations it's not recommended ([see appendix](glossary#ssr)). ```js
/// file: +page.js
export const ssr = false;
``` If you add `export const ssr = false` to your root `+layout.js`, your entire app will only be rendered on the client — which essentially means you turn your app into an SPA. "
b2e6a0e6,118,csr,Page options > csr,/20-core-concepts/40-page-options.md,"Ordinarily, SvelteKit [hydrates](glossary#hydration) your server-rendered HTML into an interactive client-side-rendered (CSR) page. Some pages don't require JavaScript at all — many blog posts and 'about' pages fall into this category. In these cases you can disable CSR: ```js
/// file: +page.js
export const csr = false;
``` > If both `ssr` and `csr` are `false`, nothing will be rendered! "
ece24062,296,trailingSlash,Page options > trailingSlash,/20-core-concepts/40-page-options.md,"By default, SvelteKit will remove trailing slashes from URLs — if you visit `/about/`, it will respond with a redirect to `/about`. You can change this behaviour with the `trailingSlash` option, which can be one of `'never'` (the default), `'always'`, or `'ignore'`. As with other page options, you can export this value from a `+layout.js` or a `+layout.server.js` and it will apply to all child pages. You can also export the configuration from `+server.js` files. ```js
/// file: src/routes/+layout.js
export const trailingSlash = 'always';
``` This option also affects [prerendering](#prerender). If `trailingSlash` is `always`, a route like `/about` will result in an `about/index.html` file, otherwise it will create `about.html`, mirroring static webserver conventions. > Ignoring trailing slashes is not recommended — the semantics of relative paths differ between the two cases (`./y` from `/x` is `/y`, but from `/x/` is `/x/y`), and `/x` and `/x/` are treated as separate URLs which is harmful to SEO. "
8dbcbdbc,444,config,Page options > config,/20-core-concepts/40-page-options.md,"With the concept of [adapters](/docs/adapters), SvelteKit is able to run on a variety of platforms. Each of these might have specific configuration to further tweak the deployment — for example on Vercel you could choose to deploy some parts of your app on the edge and others on serverless environments. `config` is an object with key-value pairs at the top level. Beyond that, the concrete shape is dependent on the adapter you're using. Every adapter should provide a `Config` interface to import for type safety. Consult the documentation of your adapter for more information. ```js
// @filename: ambient.d.ts
declare module 'some-adapter' {
	export interface Config { runtime: string }
}

// @filename: index.js
// 
/// file: src/routes/+page.js
/** @type {import('some-adapter').Config} */
export const config = {
	runtime: 'edge'
};
``` `config` objects are merged at the top level (but *not* deeper levels). This means you don't need to repeat all the values in a `+page.js` if you want to only override some of the values in the upper `+layout.js`. For example this layout configuration... ```js
/// file: src/routes/+layout.js
export const config = {
	runtime: 'edge',
	regions: 'all',
	foo: {
		bar: true
	}
}
``` ...is overridden by this page configuration... ```js
/// file: src/routes/+page.js
export const config = {
	regions: ['us1', 'us2'],
	foo: {
		baz: true
	}
}
``` ...which results in the config value `{ runtime: 'edge', regions: ['us1', 'us2'], foo: { baz: true } }` for that page. "
baf10af1,114,Building your app,Building your app,/25-build-and-deploy/10-building-your-app.md,"Building a SvelteKit app happens in two stages, which both happen when you run `vite build` (usually via `npm run build`). Firstly, Vite creates an optimized production build of your server code, your browser code, and your service worker (if you have one). [Prerendering](page-options#prerender) is executed at this stage, if appropriate. Secondly, an *adapter* takes this production build and tunes it for your target environment — more on this on the following pages. "
12a03b00,144,During the build,Building your app > During the build,/25-build-and-deploy/10-building-your-app.md,"SvelteKit will load your `+page/layout(.server).js` files (and all files they import) for analysis during the build. Any code that should *not* be executed at this stage must check that `building` from [`$app/environment`](modules#$app-environment) is `false`: ```diff
+import { building } from '$app/environment';
import { setupMyDatabase } from '$lib/server/database';

+if (!building) {
	setupMyDatabase();
+}

export function load() {
	// ...
}
``` "
dfed2eed,83,Preview your app,Building your app > Preview your app,/25-build-and-deploy/10-building-your-app.md,"After building, you can view your production build locally with `vite preview` (via `npm run preview`). Note that this will run the app in Node, and so is not a perfect reproduction of your deployed app — adapter-specific adjustments like the [`platform` object](adapters#platform-specific-context) do not apply to previews. "
4a0b500b,273,Adapters,Adapters,/25-build-and-deploy/20-adapters.md,"Before you can deploy your SvelteKit app, you need to *adapt* it for your deployment target. Adapters are small plugins that take the built app as input and generate output for deployment. Official adapters exist for a variety of platforms — these are documented on the following pages: *   [`@sveltejs/adapter-cloudflare`](adapter-cloudflare) for Cloudflare Pages
*   [`@sveltejs/adapter-cloudflare-workers`](adapter-cloudflare-workers) for Cloudflare Workers
*   [`@sveltejs/adapter-netlify`](adapter-netlify) for Netlify
*   [`@sveltejs/adapter-node`](adapter-node) for Node servers
*   [`@sveltejs/adapter-static`](adapter-static) for static site generation (SSG)
*   [`@sveltejs/adapter-vercel`](adapter-vercel) for Vercel Additional [community-provided adapters](https://sveltesociety.dev/components#adapters) exist for other platforms. "
9a91ca91,183,Using adapters,Adapters > Using adapters,/25-build-and-deploy/20-adapters.md,"Your adapter is specified in `svelte.config.js`: ```js
/// file: svelte.config.js
// @filename: ambient.d.ts
declare module 'svelte-adapter-foo' {
	const adapter: (opts: any) => import('@sveltejs/kit').Adapter;
	export default adapter;
}

// @filename: index.js
// 
import adapter from 'svelte-adapter-foo';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	kit: {
		adapter: adapter({
			// adapter options go here
		})
	}
};

export default config;
``` "
70945894,87,Platform-specific context,Adapters > Platform-specific context,/25-build-and-deploy/20-adapters.md,"Some adapters may have access to additional information about the request. For example, Cloudflare Workers can access an `env` object containing KV namespaces etc. This can be passed to the `RequestEvent` used in [hooks](hooks) and [server routes](routing#server) as the `platform` property — consult each adapter's documentation to learn more. "
9d4b854b,319,Zero-config deployments,Zero-config deployments,/25-build-and-deploy/30-adapter-auto.md,"When you create a new SvelteKit project with `npm create svelte@latest`, it installs [`adapter-auto`](https://github.com/sveltejs/kit/tree/master/packages/adapter-auto) by default. This adapter automatically installs and uses the correct adapter for supported environments when you deploy: *   [`@sveltejs/adapter-cloudflare`](adapter-cloudflare) for [Cloudflare Pages](https://developers.cloudflare.com/pages/)
*   [`@sveltejs/adapter-netlify`](adapter-netlify) for [Netlify](https://netlify.com/)
*   [`@sveltejs/adapter-vercel`](adapter-vercel) for [Vercel](https://vercel.com/)
*   [`svelte-adapter-azure-swa`](https://github.com/geoffrich/svelte-adapter-azure-swa) for [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/) It's recommended to install the appropriate adapter to your `devDependencies` once you've settled on a target environment, since this will add the adapter to your lockfile and slightly improve install times on CI. "
76e1aae1,78,Environment-specific configuration,Zero-config deployments > Environment-specific configuration,/25-build-and-deploy/30-adapter-auto.md,"To add configuration options, such as `{ edge: true }` in [`adapter-vercel`](adapter-vercel) and [`adapter-netlify`](adapter-netlify), you must install the underlying adapter — `adapter-auto` does not take any options. "
865cc65,64,Adding community adapters,Zero-config deployments > Adding community adapters,/25-build-and-deploy/30-adapter-auto.md,You can add zero-config support for additional adapters by editing [adapters.js](https://github.com/sveltejs/kit/blob/master/packages/adapter-auto/adapters.js) and opening a pull request. 
ef91d691,44,Node servers,Node servers,/25-build-and-deploy/40-adapter-node.md,"To generate a standalone Node server, use [`adapter-node`](https://github.com/sveltejs/kit/tree/master/packages/adapter-node). "
eaf114f1,104,Usage,Node servers > Usage,/25-build-and-deploy/40-adapter-node.md,"Install with `npm i -D @sveltejs/adapter-node`, then add the adapter to your `svelte.config.js`: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-node';

export default {
	kit: {
		adapter: adapter()
	}
};
``` "
4dc5b9c5,175,Deploying,Node servers > Deploying,/25-build-and-deploy/40-adapter-node.md,"First, build your app with `npm run build`. This will create the production server in the output directory specified in the adapter options, defaulting to `build`. You will need the output directory, the project's `package.json`, and the production dependencies in `node_modules` to run the application. Production dependencies can be generated with `npm ci --prod` (you can skip this step if your app doesn't have any dependencies). You can then start your app with this command: ```bash
node build
``` Development dependencies will be bundled into your app using [Rollup](https://rollupjs.org). To control whether a given package is bundled or externalised, place it in `devDependencies` or `dependencies` respectively in your `package.json`. "
6fc0c5c0,147,Environment variables,Node servers > Environment variables,/25-build-and-deploy/40-adapter-node.md,"In `dev` and `preview`, SvelteKit will read environment variables from your `.env` file (or `.env.local`, or `.env.[mode]`, [as determined by Vite](https://vitejs.dev/guide/env-and-mode.html#env-files).) In production, `.env` files are *not* automatically loaded. To do so, install `dotenv` in your project... ```bash
npm install dotenv
``` ...and invoke it before running the built app: ```diff
-node build
+node -r dotenv/config build
``` "
619b241b,70, and ,Node servers > Environment variables >  and ,/25-build-and-deploy/40-adapter-node.md,"By default, the server will accept connections on `0.0.0.0` using port 3000. These can be customised with the `PORT` and `HOST` environment variables:     HOST=127.0.0.1 PORT=4000 node build "
12f2b6f2,341,",  and ","Node servers > Environment variables > ,  and ",/25-build-and-deploy/40-adapter-node.md,"HTTP doesn't give SvelteKit a reliable way to know the URL that is currently being requested. The simplest way to tell SvelteKit where the app is being served is to set the `ORIGIN` environment variable:     ORIGIN=https://my.site node build With this, a request for the `/stuff` pathname will correctly resolve to `https://my.site/stuff`. Alternatively, you can specify headers that tell SvelteKit about the request protocol and host, from which it can construct the origin URL:     PROTOCOL_HEADER=x-forwarded-proto HOST_HEADER=x-forwarded-host node build > [`x-forwarded-proto`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Proto) and [`x-forwarded-host`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host) are de facto standard headers that forward the original protocol and host if you're using a reverse proxy (think load balancers and CDNs). You should only set these variables if your server is behind a trusted reverse proxy; otherwise, it'd be possible for clients to spoof these headers. If `adapter-node` can't correctly determine the URL of your deployment, you may experience this error when using [form actions](form-actions): > Cross-site POST form submissions are forbidden "
eac78ac7,474, and ,Node servers > Environment variables >  and ,/25-build-and-deploy/40-adapter-node.md,"The [RequestEvent](types#public-types-requestevent) object passed to hooks and endpoints includes an `event.getClientAddress()` function that returns the client's IP address. By default this is the connecting `remoteAddress`. If your server is behind one or more proxies (such as a load balancer), this value will contain the innermost proxy's IP address rather than the client's, so we need to specify an `ADDRESS_HEADER` to read the address from:     ADDRESS_HEADER=True-Client-IP node build > Headers can easily be spoofed. As with `PROTOCOL_HEADER` and `HOST_HEADER`, you should [know what you're doing](https://adam-p.ca/blog/2022/03/x-forwarded-for/) before setting these. If the `ADDRESS_HEADER` is `X-Forwarded-For`, the header value will contain a comma-separated list of IP addresses. The `XFF_DEPTH` environment variable should specify how many trusted proxies sit in front of your server. E.g. if there are three trusted proxies, proxy 3 will forward the addresses of the original connection and the first two proxies:     <client address>, <proxy 1 address>, <proxy 2 address> Some guides will tell you to read the left-most address, but this leaves you [vulnerable to spoofing](https://adam-p.ca/blog/2022/03/x-forwarded-for/):     <spoofed address>, <client address>, <proxy 1 address>, <proxy 2 address> We instead read from the *right*, accounting for the number of trusted proxies. In this case, we would use `XFF_DEPTH=3`. > If you need to read the left-most address instead (and don't care about spoofing) — for example, to offer a geolocation service, where it's more important for the IP address to be *real* than *trusted*, you can do so by inspecting the `x-forwarded-for` header within your app. "
25e2e162,64,,Node servers > Environment variables,/25-build-and-deploy/40-adapter-node.md,The maximum request body size to accept in bytes including while streaming. Defaults to 512kb. You can disable this option with a value of 0 and implement a custom check in [`handle`](hooks#server-hooks-handle) if you need something more advanced. 
d066c466,128,Options,Node servers > Options,/25-build-and-deploy/40-adapter-node.md,"The adapter can be configured with various options: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-node';

export default {
	kit: {
		adapter: adapter({
			// default options are shown
			out: 'build',
			precompress: false,
			envPrefix: '',
			polyfill: true
		})
	}
};
``` "
754d354,42,out,Node servers > Options > out,/25-build-and-deploy/40-adapter-node.md,The directory to build the server to. It defaults to `build` — i.e. `node build` would start the server locally after it has been created. 
189f169f,35,precompress,Node servers > Options > precompress,/25-build-and-deploy/40-adapter-node.md,Enables precompressing using gzip and brotli for assets and prerendered pages. It defaults to `false`. 
72c8bac8,122,envPrefix,Node servers > Options > envPrefix,/25-build-and-deploy/40-adapter-node.md,"If you need to change the name of the environment variables used to configure the deployment (for example, to deconflict with environment variables you don't control), you can specify a prefix: ```js
envPrefix: 'MY_CUSTOM_';
``` ```sh
MY_CUSTOM_HOST=127.0.0.1 \
MY_CUSTOM_PORT=4000 \
MY_CUSTOM_ORIGIN=https://my.site \
node build
``` "
d56ce56c,42,polyfill,Node servers > Options > polyfill,/25-build-and-deploy/40-adapter-node.md,"Controls whether your build will load polyfills for missing modules. It defaults to `true`, and should only be disabled when using Node 18.11 or greater. "
f1849384,330,Custom server,Node servers > Custom server,/25-build-and-deploy/40-adapter-node.md,"The adapter creates two files in your build directory — `index.js` and `handler.js`. Running `index.js` — e.g. `node build`, if you use the default build directory — will start a server on the configured port. Alternatively, you can import the `handler.js` file, which exports a handler suitable for use with [Express](https://github.com/expressjs/expressjs.com), [Connect](https://github.com/senchalabs/connect) or [Polka](https://github.com/lukeed/polka) (or even just the built-in [`http.createServer`](https://nodejs.org/dist/latest/docs/api/http.html#httpcreateserveroptions-requestlistener)) and set up your own server: ```js
// @errors: 2307 7006
/// file: my-server.js
import { handler } from './build/handler.js';
import express from 'express';

const app = express();

// add a route that lives separately from the SvelteKit app
app.get('/healthcheck', (req, res) => {
	res.end('ok');
});

// let SvelteKit handle everything else, including serving prerendered pages and static assets
app.use(handler);

app.listen(3000, () => {
	console.log('listening on port 3000');
});
``` "
f81d5edd,153,Is there a hook for cleaning up before the server exits?,Node servers > Troubleshooting > Is there a hook for cleaning up before the server exits?,/25-build-and-deploy/40-adapter-node.md,"There's nothing built-in to SvelteKit for this, because such a cleanup hook depends highly on the execution environment you're on. For Node, you can use its built-in `process.on(..)` to implement a callback that runs before the server exits: ```js
// @errors: 2304 2580
function shutdownGracefully() {
	// anything you need to clean up manually goes in here
	db.shutdown();
}

process.on('SIGINT', shutdownGracefully);
process.on('SIGTERM', shutdownGracefully);
``` "
18edd4ed,103,Static site generation,Static site generation,/25-build-and-deploy/50-adapter-static.md,"To use SvelteKit as a static site generator (SSG), use [`adapter-static`](https://github.com/sveltejs/kit/tree/master/packages/adapter-static). This will prerender your entire site as a collection of static files. If you'd like to prerender only some pages, you will need to use a different adapter together with [the `prerender` option](page-options#prerender). "
60c8b8c8,334,Usage,Static site generation > Usage,/25-build-and-deploy/50-adapter-static.md,"Install with `npm i -D @sveltejs/adapter-static`, then add the adapter to your `svelte.config.js`: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-static';

export default {
	kit: {
		adapter: adapter({
			// default options are shown. On some platforms
			// these options are set automatically — see below
			pages: 'build',
			assets: 'build',
			fallback: null,
			precompress: false,
			strict: true
		})
	}
};
``` ...and add the [`prerender`](page-options#prerender) option to your root layout: ```js
/// file: src/routes/+layout.js
// This can be false if you're using a fallback (i.e. SPA mode)
export const prerender = true;
``` > You must ensure SvelteKit's [`trailingSlash`](page-options#trailingslash) option is set appropriately for your environment. If your host does not render `/a.html` upon receiving a request for `/a` then you will need to set `trailingSlash: 'always'` to create `/a/index.html` instead. "
f6d1f8d1,118,Zero-config support,Static site generation > Zero-config support,/25-build-and-deploy/50-adapter-static.md,"Some platforms have zero-config support (more to come in future): *   [Vercel](https://vercel.com) On these platforms, you should omit the adapter options so that `adapter-static` can provide the optimal configuration: ```diff
/// file: svelte.config.js
export default {
	kit: {
-		adapter: adapter({...}),
+		adapter: adapter(),
		}
	}
};
``` "
8994a594,24,pages,Static site generation > Options > pages,/25-build-and-deploy/50-adapter-static.md,The directory to write prerendered pages to. It defaults to `build`. 
fc5e525,79,assets,Static site generation > Options > assets,/25-build-and-deploy/50-adapter-static.md,"The directory to write static assets (the contents of `static`, plus client-side JS and CSS generated by SvelteKit) to. Ordinarily this should be the same as `pages`, and it will default to whatever the value of `pages` is, but in rare circumstances you might need to output pages and assets to separate locations. "
289dcc9d,57,fallback,Static site generation > Options > fallback,/25-build-and-deploy/50-adapter-static.md,"Specify a [fallback page](#spa-mode-add-fallback-page) for SPA mode, e.g. `index.html` or `200.html` or `404.html`. "
646d646,41,precompress,Static site generation > Options > precompress,/25-build-and-deploy/50-adapter-static.md,"If `true`, precompresses files with brotli and gzip. This will generate `.br` and `.gz` files. "
84e3e873,113,strict,Static site generation > Options > strict,/25-build-and-deploy/50-adapter-static.md,"By default, `adapter-static` checks that either all pages and endpoints (if any) of your app were prerendered, or you have the `fallback` option set. This check exists to prevent you from accidentally publishing an app where some parts of it are not accessible, because they are not contained in the final output. If you know this is ok (for example when a certain page only exists conditionally), you can set `strict` to `false` to turn off this check. "
da066286,290,SPA mode,Static site generation > SPA mode,/25-build-and-deploy/50-adapter-static.md,"You can use `adapter-static` to create a single-page app or SPA by specifying a **fallback page**. > In most situations this is not recommended: it harms SEO, tends to slow down perceived performance, and makes your app inaccessible to users if JavaScript fails or is disabled (which happens [more often than you probably think](https://kryogenix.org/code/browser/everyonehasjs.html)). If you want to create a simple SPA with no prerendered routes, the necessary config looks like this: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-static';

export default {
	kit: {
		adapter: adapter({
			fallback: '200.html'
		}),
		prerender: { entries: [] }
	}
};
``` ```js
/// file: src/routes/+layout.js
export const ssr = false;
``` You can also turn only part of your app into an SPA by [disabling prerendering](#spa-mode-turn-off-prerendering) only for those pages. Let's go through these options one by one: "
b44c004c,244,Add fallback page,Static site generation > SPA mode > Add fallback page,/25-build-and-deploy/50-adapter-static.md,"The fallback page is an HTML page created by SvelteKit from your page template (e.g. `app.html`) that loads your app and navigates to the correct route. For example [Surge](https://surge.sh/help/adding-a-200-page-for-client-side-routing), a static web host, lets you add a `200.html` file that will handle any requests that don't correspond to static assets or prerendered pages. We can create that file like so: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-static';

export default {
	kit: {
		adapter: adapter({
			fallback: '200.html'
		})
	}
};
``` > How to configure this behaviour does however depend on your hosting solution and is not part of SvelteKit. It is recommended to search the host's documentation on how to redirect requests. "
47edf9ed,167,Turn off prerendering,Static site generation > SPA mode > Turn off prerendering,/25-build-and-deploy/50-adapter-static.md,"When operating in SPA mode, you can omit the [`prerender`](page-options#prerender) option from your root layout (or set it to `false`, its default value), and only pages that have the `prerender` option set will be prerendered at build time. SvelteKit will still crawl your app's entry points looking for prerenderable pages. If `svelte-kit build` fails because of pages that can't be loaded outside the browser, you can set `config.kit.prerender.entries` to `[]` to prevent this from happening. You can also add turn off prerendering only to parts of your app, if you want other parts to be prerendered. "
98e5e5e5,135,Turn off ssr,Static site generation > SPA mode > Turn off ssr,/25-build-and-deploy/50-adapter-static.md,"During development, SvelteKit will still attempt to server-side render your routes. This means accessing things that are only available in the browser (such as the `window` object) will result in errors, even though this would be valid in the output app. To align the behavior of SvelteKit's dev mode with your SPA, you can add [`export const ssr = false`](page-options#ssr) to your root `+layout`. You can also add this option only to parts of your app, if you want other parts to be prerendered. "
6e51d051,170,Apache,Static site generation > SPA mode > Apache,/25-build-and-deploy/50-adapter-static.md,"To run an SPA on [Apache](https://httpd.apache.org/), you should add a `static/.htaccess` file to route requests to the fallback page:     <IfModule mod_rewrite.c>
    	RewriteEngine On
    	RewriteBase /
    	RewriteRule ^200\.html$ - [L]
    	RewriteCond %{REQUEST_FILENAME} !-f
    	RewriteCond %{REQUEST_FILENAME} !-d
    	RewriteRule . /200.html [L]
    </IfModule> "
5b0d950d,239,GitHub Pages,Static site generation > GitHub Pages,/25-build-and-deploy/50-adapter-static.md,"When building for GitHub Pages, make sure to update [`paths.base`](configuration#paths) to match your repo name, since the site will be served from <https://your-username.github.io/your-repo-name> rather than from the root. You will have to prevent GitHub's provided Jekyll from managing your site by putting an empty `.nojekyll` file in your `static` folder. A config for GitHub Pages might look like the following: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-static';

const dev = process.argv.includes('dev');

/** @type {import('@sveltejs/kit').Config} */
const config = {
	kit: {
		adapter: adapter(),
		paths: {
			base: dev ? '' : '/your-repo-name',
		}
	}
};
``` "
dd94b594,108,Cloudflare Pages,Cloudflare Pages,/25-build-and-deploy/60-adapter-cloudflare.md,"To deploy to [Cloudflare Pages](https://developers.cloudflare.com/pages/), use [`adapter-cloudflare`](https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare). This adapter will be installed by default when you use [`adapter-auto`](adapter-auto), but adding it to your project is recommended so that `event.platform` is automatically typed. "
af762f7,176,Comparisons,Cloudflare Pages > Comparisons,/25-build-and-deploy/60-adapter-cloudflare.md,"*   `adapter-cloudflare` – supports all SvelteKit features; builds for [Cloudflare Pages](https://blog.cloudflare.com/cloudflare-pages-goes-full-stack/)
*   `adapter-cloudflare-workers` – supports all SvelteKit features; builds for Cloudflare Workers
*   `adapter-static` – only produces client-side static assets; compatible with Cloudflare Pages > Unless you have a specific reason to use `adapter-cloudflare-workers`, it's recommended that you use this adapter instead. Both adapters have equivalent functionality, but Cloudflare Pages offers features like GitHub integration with automatic builds and deploys, preview deployments, instant rollback and so on. "
4b0d270d,110,Usage,Cloudflare Pages > Usage,/25-build-and-deploy/60-adapter-cloudflare.md,"Install with `npm i -D @sveltejs/adapter-cloudflare`, then add the adapter to your `svelte.config.js`: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-cloudflare';

export default {
	kit: {
		adapter: adapter()
	}
};
``` "
b5c4fdc4,207,Deployment,Cloudflare Pages > Deployment,/25-build-and-deploy/60-adapter-cloudflare.md,"Please follow the [Get Started Guide](https://developers.cloudflare.com/pages/get-started) for Cloudflare Pages to begin. When configuring your project settings, you must use the following settings: *   **Framework preset** – None
*   **Build command** – `npm run build` or `vite build`
*   **Build output directory** – `.svelte-kit/cloudflare`
*   **Environment variables**
    *   `NODE_VERSION`: `16` > You need to add a `NODE_VERSION` environment variable to both the ""production"" and ""preview"" environments. You can add this during project setup or later in the Pages project settings. SvelteKit requires Node `16.14` or later, so you should use `16` as the `NODE_VERSION` value. "
94f57cf5,317,Environment variables,Cloudflare Pages > Environment variables,/25-build-and-deploy/60-adapter-cloudflare.md,"The [`env`](https://developers.cloudflare.com/workers/runtime-apis/fetch-event#parameters) object, containing KV/DO namespaces etc, is passed to SvelteKit via the `platform` property along with `context` and `caches`, meaning you can access it in hooks and endpoints: ```js
// @errors: 7031
export async function POST({ request, platform }) {
	const x = platform.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');
}
``` To make these types available to your app, reference them in your `src/app.d.ts`: ```diff
/// file: src/app.d.ts
declare global {
	namespace App {
		interface Platform {
+			env?: {
+				YOUR_KV_NAMESPACE: KVNamespace;
+				YOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;
+			};
		}
	}
}

export {};
``` > `platform.env` is only available in the production build. Use [wrangler](https://developers.cloudflare.com/workers/cli-wrangler) to test it locally "
83077f07,227,Notes,Cloudflare Pages > Notes,/25-build-and-deploy/60-adapter-cloudflare.md,"Functions contained in the `/functions` directory at the project's root will *not* be included in the deployment, which is compiled to a [single `_worker.js` file](https://developers.cloudflare.com/pages/platform/functions/#advanced-mode). Functions should be implemented as [server endpoints](https://kit.svelte.dev/docs/routing#server) in your SvelteKit app. The `_headers` and `_redirects` files specific to Cloudflare Pages can be used for static asset responses (like images) by putting them into the `/static` folder. However, they will have no effect on responses dynamically rendered by SvelteKit, which should return custom headers or redirect responses from [server endpoints](https://kit.svelte.dev/docs/routing#server) or with the [`handle`](https://kit.svelte.dev/docs/hooks#server-hooks-handle) hook. "
76a662a6,131,Accessing the file system,Cloudflare Pages > Troubleshooting > Accessing the file system,/25-build-and-deploy/60-adapter-cloudflare.md,"You can't access the file system through methods like `fs.readFileSync` in Serverless/Edge environments. If you need to access files that way, do that during building the app through [prerendering](https://kit.svelte.dev/docs/page-options#prerender). If you have a blog for example and don't want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content. "
546f346f,130,Cloudflare Workers,Cloudflare Workers,/25-build-and-deploy/70-adapter-cloudflare-workers.md,"To deploy to [Cloudflare Workers](https://workers.cloudflare.com/), use [`adapter-cloudflare-workers`](https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare-workers). Unless you have a specific reason to use this adapter, we recommend using [`adapter-cloudflare`](adapter-cloudflare) instead. > Requires [Wrangler v2](https://developers.cloudflare.com/workers/wrangler/get-started/). "
908acc8a,114,Usage,Cloudflare Workers > Usage,/25-build-and-deploy/70-adapter-cloudflare-workers.md,"Install with `npm i -D @sveltejs/adapter-cloudflare-workers`, then add the adapter to your `svelte.config.js`: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-cloudflare-workers';

export default {
	kit: {
		adapter: adapter()
	}
};
``` "
3ea012a0,344,Basic Configuration,Cloudflare Workers > Basic Configuration,/25-build-and-deploy/70-adapter-cloudflare-workers.md,"This adapter expects to find a [wrangler.toml](https://developers.cloudflare.com/workers/platform/sites/configuration) file in the project root. It should look something like this: ```toml
/// file: wrangler.toml
name = ""<your-service-name>""
account_id = ""<your-account-id>""

main = ""./.cloudflare/worker.js""
site.bucket = ""./.cloudflare/public""

build.command = ""npm run build""

compatibility_date = ""2021-11-12""
workers_dev = true
``` `<your-service-name>` can be anything. `<your-account-id>` can be found by logging into your [Cloudflare dashboard](https://dash.cloudflare.com) and grabbing it from the end of the URL:     https://dash.cloudflare.com/<your-account-id> > You should add the `.cloudflare` directory (or whichever directories you specified for `main` and `site.bucket`) to your `.gitignore`. You will need to install [wrangler](https://developers.cloudflare.com/workers/wrangler/get-started/) and log in, if you haven't already:     npm i -g wrangler
    wrangler login Then, you can build your app and deploy it: ```sh
wrangler publish
``` "
d06d1c6d,115,Custom config,Cloudflare Workers > Custom config,/25-build-and-deploy/70-adapter-cloudflare-workers.md,"If you would like to use a config file other than `wrangler.toml`, you can do like so: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-cloudflare-workers';

export default {
	kit: {
		adapter: adapter({ config: '<your-wrangler-name>.toml' })
	}
};
``` "
94f57cf5,317,Environment variables,Cloudflare Workers > Environment variables,/25-build-and-deploy/70-adapter-cloudflare-workers.md,"The [`env`](https://developers.cloudflare.com/workers/runtime-apis/fetch-event#parameters) object, containing KV/DO namespaces etc, is passed to SvelteKit via the `platform` property along with `context` and `caches`, meaning you can access it in hooks and endpoints: ```js
// @errors: 7031
export async function POST({ request, platform }) {
	const x = platform.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');
}
``` To make these types available to your app, reference them in your `src/app.d.ts`: ```diff
/// file: src/app.d.ts
declare global {
	namespace App {
		interface Platform {
+			env?: {
+				YOUR_KV_NAMESPACE: KVNamespace;
+				YOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;
+			};
		}
	}
}

export {};
``` > `platform.env` is only available in the production build. Use [wrangler](https://developers.cloudflare.com/workers/cli-wrangler) to test it locally "
7dc50445,162,Worker size limits,Cloudflare Workers > Troubleshooting > Worker size limits,/25-build-and-deploy/70-adapter-cloudflare-workers.md,"When deploying to workers, the server generated by SvelteKit is bundled into a single file. Wrangler will fail to publish your worker if it exceeds [the size limits](https://developers.cloudflare.com/workers/platform/limits/#worker-size) after minification. You're unlikely to hit this limit usually, but some large libraries can cause this to happen. In that case, you can try to reduce the size of your worker by only importing such libraries on the client side. See [the FAQ](/faq#how-do-i-use-a-client-side-only-library-that-depends-on-document-or-window) for more information. "
76a662a6,131,Accessing the file system,Cloudflare Workers > Troubleshooting > Accessing the file system,/25-build-and-deploy/70-adapter-cloudflare-workers.md,"You can't access the file system through methods like `fs.readFileSync` in Serverless/Edge environments. If you need to access files that way, do that during building the app through [prerendering](https://kit.svelte.dev/docs/page-options#prerender). If you have a blog for example and don't want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content. "
476bf56b,89,Netlify,Netlify,/25-build-and-deploy/80-adapter-netlify.md,"To deploy to Netlify, use [`adapter-netlify`](https://github.com/sveltejs/kit/tree/master/packages/adapter-netlify). This adapter will be installed by default when you use [`adapter-auto`](adapter-auto), but adding it to your project allows you to specify Netlify-specific options. "
d21d111d,394,Usage,Netlify > Usage,/25-build-and-deploy/80-adapter-netlify.md,"Install with `npm i -D @sveltejs/adapter-netlify`, then add the adapter to your `svelte.config.js`: ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-netlify';

export default {
	kit: {
		// default options are shown
		adapter: adapter({
			// if true, will create a Netlify Edge Function rather
			// than using standard Node-based functions
			edge: false,

			// if true, will split your app into multiple functions
			// instead of creating a single one for the entire app.
			// if `edge` is true, this option cannot be used
			split: false
		})
	}
};
``` Then, make sure you have a [netlify.toml](https://docs.netlify.com/configure-builds/file-based-configuration) file in the project root. This will determine where to write static assets based on the `build.publish` settings, as per this sample configuration: ```toml
[build]
	command = ""npm run build""
	publish = ""build""
``` If the `netlify.toml` file or the `build.publish` value is missing, a default value of `""build""` will be used. Note that if you have set the publish directory in the Netlify UI to something else then you will need to set it in `netlify.toml` too, or use the default value of `""build""`. "
eef93af9,89,Node version,Netlify > Usage > Node version,/25-build-and-deploy/80-adapter-netlify.md,"New projects will use Node 16 by default. However, if you're upgrading a project you created a while ago it may be stuck on an older version. See [the Netlify docs](https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-and-javascript) for details on manually specifying Node 16 or newer. "
8f4b3c4b,229,Netlify Edge Functions (beta),Netlify > Netlify Edge Functions (beta),/25-build-and-deploy/80-adapter-netlify.md,"SvelteKit supports the beta release of [Netlify Edge Functions](https://docs.netlify.com/netlify-labs/experimental-features/edge-functions/). If you pass the option `edge: true` to the `adapter` function, server-side rendering will happen in a Deno-based edge function that's deployed close to the site visitor. If set to `false` (the default), the site will deploy to standard Node-based Netlify Functions. ```js
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-netlify';

export default {
	kit: {
		adapter: adapter({
			// will create a Netlify Edge Function using Deno-based
			// rather than using standard Node-based functions
			edge: true
		})
	}
};
``` "
8e5fb65f,127,Netlify alternatives to SvelteKit functionality,Netlify > Netlify alternatives to SvelteKit functionality,/25-build-and-deploy/80-adapter-netlify.md,"You may build your app using functionality provided directly by SvelteKit without relying on any Netlify functionality. Using the SvelteKit versions of these features will allow them to be used in dev mode, tested with integration tests, and to work with other adapters should you ever decide to switch away from Netlify. However, in some scenarios you may find it beneficial to use the Netlify versions of these features. One example would be if you're migrating an app that's already hosted on Netlify to SvelteKit. "
39138513,237,Redirect rules,Netlify > Netlify alternatives to SvelteKit functionality > Redirect rules,/25-build-and-deploy/80-adapter-netlify.md,"During compilation, redirect rules are automatically appended to your `_redirects` file. (If it doesn't exist yet, it will be created.) That means: *   `[[redirects]]` in `netlify.toml` will never match as `_redirects` has a [higher priority](https://docs.netlify.com/routing/redirects/#rule-processing-order). So always put your rules in the [`_redirects` file](https://docs.netlify.com/routing/redirects/#syntax-for-the-redirects-file).
*   `_redirects` shouldn't have any custom ""catch all"" rules such as `/* /foobar/:splat`. Otherwise the automatically appended rule will never be applied as Netlify is only processing [the first matching rule](https://docs.netlify.com/routing/redirects/#rule-processing-order). "
36f198f1,260,Netlify Forms,Netlify > Netlify alternatives to SvelteKit functionality > Netlify Forms,/25-build-and-deploy/80-adapter-netlify.md,"1.  Create your Netlify HTML form as described [here](https://docs.netlify.com/forms/setup/#html-forms), e.g. as `/routes/contact/+page.svelte`. (Don't forget to add the hidden `form-name` input element!)
2.  Netlify's build bot parses your HTML files at deploy time, which means your form must be [prerendered](https://kit.svelte.dev/docs/page-options#prerender) as HTML. You can either add `export const prerender = true` to your `contact.svelte` to prerender just that page or set the `kit.prerender.force: true` option to prerender all pages.
3.  If your Netlify form has a [custom success message](https://docs.netlify.com/forms/setup/#success-messages) like `<form netlify ... action=""/success"">` then ensure the corresponding `/routes/success/+page.svelte` exists and is prerendered. "
37ff67ff,345,Netlify Functions,Netlify > Netlify alternatives to SvelteKit functionality > Netlify Functions,/25-build-and-deploy/80-adapter-netlify.md,"With this adapter, SvelteKit endpoints are hosted as [Netlify Functions](https://docs.netlify.com/functions/overview/). Netlify function handlers have additional context, including [Netlify Identity](https://docs.netlify.com/visitor-access/identity/) information. You can access this context via the `event.platform.context` field inside your hooks and `+page.server` or `+layout.server` endpoints. These are [serverless functions](https://docs.netlify.com/functions/overview/) when the `edge` property is `false` in the adapter config or [edge functions](https://docs.netlify.com/edge-functions/overview/#app) when it is `true`. ```js
// @errors: 2705 7006
/// file: +page.server.js
export const load = async (event) => {
	const context = event.platform.context;
	console.log(context); // shows up in your functions log in the Netlify app
};
``` Additionally, you can add your own Netlify functions by creating a directory for them and adding the configuration to your `netlify.toml` file. For example: ```toml
[build]
	command = ""npm run build""
	publish = ""build""

[functions]
	directory = ""functions""
``` "
76a662a6,130,Accessing the file system,Netlify > Troubleshooting > Accessing the file system,/25-build-and-deploy/80-adapter-netlify.md,"You can't access the file system through methods like `fs.readFileSync` in Serverless/Edge environments. If you need to access files that way, do that during building the app through [prerendering](https://kit.svelte.dev/docs/page-options#prerender). If you have a blog for example and don't want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content. "
5ba3f7a3,84,Vercel,Vercel,/25-build-and-deploy/90-adapter-vercel.md,"To deploy to Vercel, use [`adapter-vercel`](https://github.com/sveltejs/kit/tree/master/packages/adapter-vercel). This adapter will be installed by default when you use [`adapter-auto`](adapter-auto), but adding it to your project allows you to specify Vercel-specific options. "
7ed216d2,126,Usage,Vercel > Usage,/25-build-and-deploy/90-adapter-vercel.md,"Install with `npm i -D @sveltejs/adapter-vercel`, then add the adapter to your `svelte.config.js`: ```js
// @errors: 2307 2345
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-vercel';

export default {
	kit: {
		adapter: adapter({
			// see the 'Deployment configuration' section below
		})
	}
};
``` "
1d49eee9,733,Deployment configuration,Vercel > Deployment configuration,/25-build-and-deploy/90-adapter-vercel.md,"To control how your routes are deployed to Vercel as functions, you can specify deployment configuration, either through the option shown above or with [`export const config`](/docs/page-options#config) inside `+server.js`, `+page(.server).js` and `+layout(.server).js` files. For example you could deploy some parts of your app as [Edge Functions](https://vercel.com/docs/concepts/functions/edge-functions)... ```js
/// file: about/+page.js
/** @type {import('@sveltejs/adapter-vercel').Config} */
export const config = {
	runtime: 'edge'
};
``` ...and others as [Serverless Functions](https://vercel.com/docs/concepts/functions/serverless-functions) (note that by specifying `config` inside a layout, it applies to all child pages): ```js
/// file: admin/+layout.js
/** @type {import('@sveltejs/adapter-vercel').Config} */
export const config = {
	runtime: 'nodejs18.x'
};
``` The following options apply to all functions: *   `runtime`: `'edge'`, `'nodejs16.x'` or `'nodejs18.x'`. By default, the adapter will select `'nodejs16.x'` or `'nodejs18.x'` depending on the Node version your project is configured to use on the Vercel dashboard
*   `regions`: an array of [edge network regions](https://vercel.com/docs/concepts/edge-network/regions) (defaulting to `[""iad1""]` for serverless functions) or `'all'` if `runtime` is `edge` (its default). Note that multiple regions for serverless functions are only supported on Enterprise plans
*   `split`: if `true`, causes a route to be deployed as an individual function. If `split` is set to `true` at the adapter level, all routes will be deployed as individual functions Additionally, the following options apply to edge functions: *   `envVarsInUse`: an array of environment variables that should be accessible inside the edge function
*   `external`: an array of dependencies that esbuild should treat as external when bundling functions. This should only be used to exclude optional dependencies that will not run outside Node And the following option apply to serverless functions: *   `memory`: the amount of memory available to the function. Defaults to `1024` Mb, and can be decreased to `128` Mb or [increased](https://vercel.com/docs/concepts/limits/overview#serverless-function-memory) in 64Mb increments up to `3008` Mb on Pro or Enterprise accounts
*   `maxDuration`: maximum execution duration of the function. Defaults to `10` seconds for Hobby accounts, `60` for Pro and `900` for Enterprise
*   `isr`: configuration Incremental Static Regeneration, described below If your functions need to access data in a specific region, it's recommended that they be deployed in the same region (or close to it) for optimal performance. "
12e5fee5,412,Incremental Static Regeneration,Vercel > Incremental Static Regeneration,/25-build-and-deploy/90-adapter-vercel.md,"Vercel supports [Incremental Static Regeneration](https://vercel.com/docs/concepts/incremental-static-regeneration/overview) (ISR), which provides the performance and cost advantages of prerendered content with the flexibility of dynamically rendered content. To add ISR to a route, include the `isr` property in your `config` object: ```js
/// file: blog/[slug]/+page.server.js
// @filename: ambient.d.ts
declare module '$env/static/private' {
	export const BYPASS_TOKEN: string;
}

// @filename: index.js
// 
import { BYPASS_TOKEN } from '$env/static/private';

export const config = {
	isr: {
		// Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
		// Setting the value to `false` means it will never expire.
		expiration: 60,

		// Random token that can be provided in the URL to bypass the cached version of the asset, by requesting the asset
		// with a __prerender_bypass=<token> cookie.
		//
		// Making a `GET` or `HEAD` request with `x-prerender-revalidate: <token>` will force the asset to be re-validated.
		bypassToken: BYPASS_TOKEN,

		// List of valid query parameters. Other parameters (such as utm tracking codes) will be ignored,
		// ensuring that they do not result in content being regenerated unnecessarily
		allowQuery: ['search']
	}
};
``` The `expiration` property is required; all others are optional. "
a67c027c,362,Environment variables,Vercel > Environment variables,/25-build-and-deploy/90-adapter-vercel.md,"Vercel makes a set of [deployment-specific environment variables](https://vercel.com/docs/concepts/projects/environment-variables#system-environment-variables) available. Like other environment variables, these are accessible from `$env/static/private` and `$env/dynamic/private` (sometimes — more on that later), and inaccessible from their public counterparts. To access one of these variables from the client: ```js
// @errors: 2305
/// file: +layout.server.js
import { VERCEL_COMMIT_REF } from '$env/static/private';

/** @type {import('./$types').LayoutServerLoad} */
export function load() {
	return {
		deploymentGitBranch: VERCEL_COMMIT_REF
	};
}
``` ```svelte
/// file: +layout.svelte
<script>
	/** @type {import('./$types').LayoutServerData} */
	export let data;
</script>

<p>This staging environment was deployed from {data.deploymentGitBranch}.</p>
``` Since all of these variables are unchanged between build time and run time when building on Vercel, we recommend using `$env/static/private` — which will statically replace the variables, enabling optimisations like dead code elimination — rather than `$env/dynamic/private`. If you're deploying with `edge: true` you must either use `$env/static/private` or populate the `envVarsInUse` configuration. "
98322432,123,Vercel functions,Vercel > Notes > Vercel functions,/25-build-and-deploy/90-adapter-vercel.md,"If you have Vercel functions contained in the `api` directory at the project's root, any requests for `/api/*` will *not* be handled by SvelteKit. You should implement these as [API routes](https://kit.svelte.dev/docs/routing#server) in your SvelteKit app instead, unless you need to use a non-JavaScript language in which case you will need to ensure that you don't have any `/api/*` routes in your SvelteKit app. "
41aeddae,80,Node version,Vercel > Notes > Node version,/25-build-and-deploy/90-adapter-vercel.md,"Projects created before a certain date will default to using Node 14, while SvelteKit requires Node 16 or later. You can [change the Node version in your project settings](https://vercel.com/docs/concepts/functions/serverless-functions/runtimes/node-js#node.js-version). "
76a662a6,129,Accessing the file system,Vercel > Troubleshooting > Accessing the file system,/25-build-and-deploy/90-adapter-vercel.md,"You can't access the file system through methods like `fs.readFileSync` in Serverless/Edge environments. If you need to access files that way, do that during building the app through [prerendering](https://kit.svelte.dev/docs/page-options#prerender). If you have a blog for example and don't want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content. "
77780978,644,Writing adapters,Writing adapters,/25-build-and-deploy/99-writing-adapters.md,"If an adapter for your preferred environment doesn't yet exist, you can build your own. We recommend [looking at the source for an adapter](https://github.com/sveltejs/kit/tree/master/packages) to a platform similar to yours and copying it as a starting point. Adapters packages must implement the following API, which creates an `Adapter`: ```js
// @filename: ambient.d.ts
type AdapterSpecificOptions = any;

// @filename: index.js
// 
/** @param {AdapterSpecificOptions} options */
export default function (options) {
	/** @type {import('@sveltejs/kit').Adapter} */
	const adapter = {
		name: 'adapter-package-name',
		async adapt(builder) {
			// adapter implementation
		}
	};

	return adapter;
}
``` The types for `Adapter` and its parameters are available in [types/index.d.ts](https://github.com/sveltejs/kit/blob/master/packages/kit/types/index.d.ts). Within the `adapt` method, there are a number of things that an adapter should do: *   Clear out the build directory
*   Write SvelteKit output with `builder.writeClient`, `builder.writeServer`, and `builder.writePrerendered`
*   Output code that:
    *   Imports `Server` from `${builder.getServerDirectory()}/index.js`
    *   Instantiates the app with a manifest generated with `builder.generateManifest({ relativePath })`
    *   Listens for requests from the platform, converts them to a standard [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) if necessary, calls the `server.respond(request, { getClientAddress })` function to generate a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) and responds with it
    *   expose any platform-specific information to SvelteKit via the `platform` option passed to `server.respond`
    *   Globally shims `fetch` to work on the target platform, if necessary. SvelteKit provides a `@sveltejs/kit/install-fetch` helper for platforms that can use `node-fetch`
*   Bundle the output to avoid needing to install dependencies on the target platform, if necessary
*   Put the user's static files and the generated JS/CSS in the correct location for the target platform Where possible, we recommend putting the adapter output under the `build/` directory with any intermediate output placed under `.svelte-kit/[adapter-name]`. "
c0434443,266,Rest parameters,Advanced routing > Rest parameters,/30-advanced/10-advanced-routing.md,"If the number of route segments is unknown, you can use rest syntax — for example you might implement GitHub's file viewer like so... ```bash
/[org]/[repo]/tree/[branch]/[...file]
``` ...in which case a request for `/sveltejs/kit/tree/master/documentation/docs/04-advanced-routing.md` would result in the following parameters being available to the page: ```js
// @noErrors
{
	org: 'sveltejs',
	repo: 'kit',
	branch: 'master',
	file: 'documentation/docs/04-advanced-routing.md'
}
``` > `src/routes/a/[...rest]/z/+page.svelte` will match `/a/z` (i.e. there's no parameter at all) as well as `/a/b/z` and `/a/b/c/z` and so on. Make sure you check that the value of the rest parameter is valid, for example using a [matcher](#matching). "
b9509f50,360,404 pages,Advanced routing > Rest parameters > 404 pages,/30-advanced/10-advanced-routing.md,"Rest parameters also allow you to render custom 404s. Given these routes...     src/routes/
    ├ marx-brothers/
    │ ├ chico/
    │ ├ harpo/
    │ ├ groucho/
    │ └ +error.svelte
    └ +error.svelte ...the `marx-brothers/+error.svelte` file will *not* be rendered if you visit `/marx-brothers/karl`, because no route was matched. If you want to render the nested error page, you should create a route that matches any `/marx-brothers/*` request, and return a 404 from it: ```diff
src/routes/
├ marx-brothers/
+| ├ [...path]/
│ ├ chico/
│ ├ harpo/
│ ├ groucho/
│ └ +error.svelte
└ +error.svelte
``` ```js
/// file: src/routes/marx-brothers/[...path]/+page.js
import { error } from '@sveltejs/kit';

/** @type {import('./$types').PageLoad} */
export function load(event) {
	throw error(404, 'Not Found');
}
``` > If you don't handle 404 cases, they will appear in [`handleError`](hooks#shared-hooks-handleerror) "
61b3deb3,120,Optional parameters,Advanced routing > Optional parameters,/30-advanced/10-advanced-routing.md,"A route like `[lang]/home` contains a parameter named `lang` which is required. Sometimes it's beneficial to make these parameters optional, so that in this example both `home` and `en/home` point to the same page. You can do that by wrapping the parameter in another bracket pair: `[[lang]]/home` Note that an optional route parameter cannot follow a rest parameter (`[...rest]/[[optional]]`), since parameters are matched 'greedily' and the optional parameter would always be unused. "
4eb852b8,300,Matching,Advanced routing > Matching,/30-advanced/10-advanced-routing.md,"A route like `src/routes/archive/[page]` would match `/archive/3`, but it would also match `/archive/potato`. We don't want that. You can ensure that route parameters are well-formed by adding a *matcher* — which takes the parameter string (`""3""` or `""potato""`) and returns `true` if it is valid — to your [`params`](configuration#files) directory... ```js
/// file: src/params/integer.js
/** @type {import('@sveltejs/kit').ParamMatcher} */
export function match(param) {
	return /^\d+$/.test(param);
}
``` ...and augmenting your routes: ```diff
-src/routes/archive/[page]
+src/routes/archive/[page=integer]
``` If the pathname doesn't match, SvelteKit will try to match other routes (using the sort order specified below), before eventually returning a 404. Each module in the `params` directory corresponds to a matcher, with the exception of `*.test.js` and `*.spec.js` files which may be used to unit test your matchers. > Matchers run both on the server and in the browser. "
f1355f35,455,Sorting,Advanced routing > Sorting,/30-advanced/10-advanced-routing.md,"It's possible for multiple routes to match a given path. For example each of these routes would match `/foo-abc`: ```bash
src/routes/[...catchall]/+page.svelte
src/routes/[[a=x]]/+page.svelte
src/routes/[b]/+page.svelte
src/routes/foo-[c]/+page.svelte
src/routes/foo-abc/+page.svelte
``` SvelteKit needs to know which route is being requested. To do so, it sorts them according to the following rules... *   More specific routes are higher priority (e.g. a route with no parameters is more specific than a route with one dynamic parameter, and so on)
*   Parameters with [matchers](#matching) (`[name=type]`) are higher priority than those without (`[name]`)
*   `[[optional]]` and `[...rest]` parameters are ignored unless they are the final part of the route, in which case they are treated with lowest priority. In other words `x/[[y]]/z` is treated equivalently to `x/z` for the purposes of sorting
*   Ties are resolved alphabetically ...resulting in this ordering, meaning that `/foo-abc` will invoke `src/routes/foo-abc/+page.svelte`, and `/foo-def` will invoke `src/routes/foo-[c]/+page.svelte` rather than less specific routes: ```bash
src/routes/foo-abc/+page.svelte
src/routes/foo-[c]/+page.svelte
src/routes/[[a=x]]/+page.svelte
src/routes/[b]/+page.svelte
src/routes/[...catchall]/+page.svelte
``` "
267a127a,761,Encoding,Advanced routing > Encoding,/30-advanced/10-advanced-routing.md,"Some characters can't be used on the filesystem — `/` on Linux and Mac, `\ / : * ? "" < > |` on Windows. The `#` and `%` characters have special meaning in URLs, and the `[ ] ( )` characters have special meaning to SvelteKit, so these also can't be used directly as part of your route. To use these characters in your routes, you can use hexadecimal escape sequences, which have the format `[x+nn]` where `nn` is a hexadecimal character code: *   `\` — `[x+5c]`
*   `/` — `[x+2f]`
*   `:` — `[x+3a]`
*   `*` — `[x+2a]`
*   `?` — `[x+3f]`
*   `""` — `[x+22]`
*   `<` — `[x+3c]`
*   `>` — `[x+3e]`
*   `|` — `[x+7c]`
*   `#` — `[x+23]`
*   `%` — `[x+25]`
*   `[` — `[x+5b]`
*   `]` — `[x+5d]`
*   `(` — `[x+28]`
*   `)` — `[x+29]` For example, to create a `/smileys/:-)` route, you would create a `src/routes/smileys/[x+3a]-[x+29]/+page.svelte` file. You can determine the hexadecimal code for a character with JavaScript: ```js
':'.charCodeAt(0).toString(16); // '3a', hence '[x+3a]'
``` You can also use Unicode escape sequences. Generally you won't need to as you can use the unencoded character directly, but if — for some reason — you can't have a filename with an emoji in it, for example, then you can use the escaped characters. In other words, these are equivalent:     src/routes/[u+d83e][u+dd2a]/+page.svelte
    src/routes/🤪/+page.svelte The format for a Unicode escape sequence is `[u+nnnn]` where `nnnn` is a valid value between `0000` and `10ffff`. (Unlike JavaScript string escaping, there's no need to use surrogate pairs to represent code points above `ffff`.) To learn more about Unicode encodings, consult [Programming with Unicode](https://unicodebook.readthedocs.io/unicode_encodings.html). > Since TypeScript [struggles](https://github.com/microsoft/TypeScript/issues/13399) with directories with a leading `.` character, you may find it useful to encode these characters when creating e.g. [`.well-known`](https://en.wikipedia.org/wiki/Well-known_URI) routes: `src/routes/[x+2e]well-known/...` "
fef7f8f7,33,Advanced layouts,Advanced routing > Advanced layouts,/30-advanced/10-advanced-routing.md,"By default, the *layout hierarchy* mirrors the *route hierarchy*. In some cases, that might not be what you want. "
cfdd7fdd,245,(group),Advanced routing > Advanced layouts > (group),/30-advanced/10-advanced-routing.md,"Perhaps you have some routes that are 'app' routes that should have one layout (e.g. `/dashboard` or `/item`), and others that are 'marketing' routes that should have a different layout (`/blog` or `/testimonials`). We can group these routes with a directory whose name is wrapped in parentheses — unlike normal directories, `(app)` and `(marketing)` do not affect the URL pathname of the routes inside them: ```diff
src/routes/
+│ (app)/
│ ├ dashboard/
│ ├ item/
│ └ +layout.svelte
+│ (marketing)/
│ ├ about/
│ ├ testimonials/
│ └ +layout.svelte
├ admin/
└ +layout.svelte
``` You can also put a `+page` directly inside a `(group)`, for example if `/` should be an `(app)` or a `(marketing)` page. "
7551dd51,104,Breaking out of layouts,Advanced routing > Advanced layouts > Breaking out of layouts,/30-advanced/10-advanced-routing.md,"The root layout applies to every page of your app — if omitted, it defaults to `<slot />`. If you want some pages to have a different layout hierarchy than the rest, then you can put your entire app inside one or more groups *except* the routes that should not inherit the common layouts. In the example above, the `/admin` route does not inherit either the `(app)` or `(marketing)` layouts. "
6b144314,478,+page@,Advanced routing > Advanced layouts > +page@,/30-advanced/10-advanced-routing.md,"Pages can break out of the current layout hierarchy on a route-by-route basis. Suppose we have an `/item/[id]/embed` route inside the `(app)` group from the previous example: ```diff
src/routes/
├ (app)/
│ ├ item/
│ │ ├ [id]/
│ │ │ ├ embed/
+│ │ │ │ └ +page.svelte
│ │ │ └ +layout.svelte
│ │ └ +layout.svelte
│ └ +layout.svelte
└ +layout.svelte
``` Ordinarily, this would inherit the root layout, the `(app)` layout, the `item` layout and the `[id]` layout. We can reset to one of those layouts by appending `@` followed by the segment name — or, for the root layout, the empty string. In this example, we can choose from the following options: *   `+page@[id].svelte` - inherits from `src/routes/(app)/item/[id]/+layout.svelte`
*   `+page@item.svelte` - inherits from `src/routes/(app)/item/+layout.svelte`
*   `+page@(app).svelte` - inherits from `src/routes/(app)/+layout.svelte`
*   `+page@.svelte` - inherits from `src/routes/+layout.svelte` ```diff
src/routes/
├ (app)/
│ ├ item/
│ │ ├ [id]/
│ │ │ ├ embed/
+│ │ │ │ └ +page@(app).svelte
│ │ │ └ +layout.svelte
│ │ └ +layout.svelte
│ └ +layout.svelte
└ +layout.svelte
``` "
e52ed52e,257,+layout@,Advanced routing > Advanced layouts > +layout@,/30-advanced/10-advanced-routing.md,"Like pages, layouts can *themselves* break out of their parent layout hierarchy, using the same technique. For example, a `+layout@.svelte` component would reset the hierarchy for all its child routes.     src/routes/
    ├ (app)/
    │ ├ item/
    │ │ ├ [id]/
    │ │ │ ├ embed/
    │ │ │ │ └ +page.svelte  // uses (app)/item/[id]/+layout.svelte
    │ │ │ ├ +layout.svelte  // inherits from (app)/item/+layout@.svelte
    │ │ │ └ +page.svelte    // uses (app)/item/+layout@.svelte
    │ │ └ +layout@.svelte   // inherits from root layout, skipping (app)/+layout.svelte
    │ └ +layout.svelte
    └ +layout.svelte "
1f6c336c,370,When to use layout groups,Advanced routing > Advanced layouts > When to use layout groups,/30-advanced/10-advanced-routing.md,"Not all use cases are suited for layout grouping, nor should you feel compelled to use them. It might be that your use case would result in complex `(group)` nesting, or that you don't want to introduce a `(group)` for a single outlier. It's perfectly fine to use other means such as composition (reusable `load` functions or Svelte components) or if-statements to achieve what you want. The following example shows a layout that rewinds to the root layout and reuses components and functions that other layouts can also use: ```svelte
/// file: src/routes/nested/route/+layout@.svelte
<script>
	import ReusableLayout from '$lib/ReusableLayout.svelte';
	export let data;
</script>

<ReusableLayout {data}>
	<slot />
</ReusableLayout>
``` ```js
/// file: src/routes/nested/route/+layout.js
// @filename: ambient.d.ts
declare module ""$lib/reusable-load-function"" {
	export function reusableLoad(event: import('@sveltejs/kit').LoadEvent): Promise<Record<string, any>>;
}
// @filename: index.js
// 
import { reusableLoad } from '$lib/reusable-load-function';

/** @type {import('./$types').PageLoad} */
export function load(event) {
	// Add additional logic here, if needed
	return reusableLoad(event);
}
``` "
e5b021b0,140,Hooks,Hooks,/30-advanced/20-hooks.md,"'Hooks' are app-wide functions you declare that SvelteKit will call in response to specific events, giving you fine-grained control over the framework's behaviour. There are two hooks files, both optional: *   `src/hooks.server.js` — your app's server hooks
*   `src/hooks.client.js` — your app's client hooks Code in these modules will run when the application starts up, making them useful for initializing database clients and so on. > You can configure the location of these files with [`config.kit.files.hooks`](configuration#files). "
1258da58,25,Server hooks,Hooks > Server hooks,/30-advanced/20-hooks.md,The following hooks can be added to `src/hooks.server.js`: 
9b2d432d,1185,handle,Hooks > Server hooks > handle,/30-advanced/20-hooks.md,"This function runs every time the SvelteKit server receives a [request](web-standards#fetch-apis-request) — whether that happens while the app is running, or during [prerendering](page-options#prerender) — and determines the [response](web-standards#fetch-apis-response). It receives an `event` object representing the request and a function called `resolve`, which renders the route and generates a `Response`. This allows you to modify response headers or bodies, or bypass SvelteKit entirely (for implementing routes programmatically, for example). ```js
/// file: src/hooks.server.js
/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	if (event.url.pathname.startsWith('/custom')) {
		return new Response('custom response');
	}

	const response = await resolve(event);
	return response;
}
``` > Requests for static assets — which includes pages that were already prerendered — are *not* handled by SvelteKit. If unimplemented, defaults to `({ event, resolve }) => resolve(event)`. To add custom data to the request, which is passed to handlers in `+server.js` and server `load` functions, populate the `event.locals` object, as shown below. ```js
/// file: src/hooks.server.js
// @filename: ambient.d.ts
type User = {
	name: string;
}

declare namespace App {
	interface Locals {
		user: User;
	}
}

const getUserInformation: (cookie: string | void) => Promise<User>;

// @filename: index.js
// 
/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	event.locals.user = await getUserInformation(event.cookies.get('sessionid'));

	const response = await resolve(event);
	response.headers.set('x-custom-header', 'potato');

	return response;
}
``` You can define multiple `handle` functions and execute them with [the `sequence` helper function](modules#sveltejs-kit-hooks). `resolve` also supports a second, optional parameter that gives you more control over how the response will be rendered. That parameter is an object that can have the following fields: *   `transformPageChunk(opts: { html: string, done: boolean }): MaybePromise<string | undefined>` — applies custom transforms to HTML. If `done` is true, it's the final chunk. Chunks are not guaranteed to be well-formed HTML (they could include an element's opening tag but not its closing tag, for example) but they will always be split at sensible boundaries such as `%sveltekit.head%` or layout/page components.
*   `filterSerializedResponseHeaders(name: string, value: string): boolean` — determines which headers should be included in serialized responses when a `load` function loads a resource with `fetch`. By default, none will be included.
*   `preload(input: { type: 'js' | 'css' | 'font' | 'asset', path: string }): boolean` — determines what files should be added to the `<head>` tag to preload it. The method is called with each file that was found at build time while constructing the code chunks — so if you for example have `import './styles.css` in your `+page.svelte`, `preload` will be called with the resolved path to that CSS file when visiting that page. Note that in dev mode `preload` is *not* called, since it depends on analysis that happens at build time. Preloading can improve performance by downloading assets sooner, but it can also hurt if too much is downloaded unnecessarily. By default, `js` and `css` files will be preloaded. `asset` files are not preloaded at all currently, but we may add this later after evaluating feedback. ```js
/// file: src/hooks.server.js
/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	const response = await resolve(event, {
		transformPageChunk: ({ html }) => html.replace('old', 'new'),
		filterSerializedResponseHeaders: (name) => name.startsWith('x-'),
		preload: ({ type, path }) => type === 'js' || path.includes('/important/')
	});

	return response;
}
``` Note that `resolve(...)` will never throw an error, it will always return a `Promise<Response>` with the appropriate status code. If an error is thrown elsewhere during `handle`, it is treated as fatal, and SvelteKit will respond with a JSON representation of the error or a fallback error page — which can be customised via `src/error.html` — depending on the `Accept` header. You can read more about error handling [here](errors). "
22dff0df,593,handleFetch,Hooks > Server hooks > handleFetch,/30-advanced/20-hooks.md,"This function allows you to modify (or replace) a `fetch` request that happens inside a `load` or `action` function that runs on the server (or during pre-rendering). For example, your `load` function might make a request to a public URL like `https://api.yourapp.com` when the user performs a client-side navigation to the respective page, but during SSR it might make sense to hit the API directly (bypassing whatever proxies and load balancers sit between it and the public internet). ```js
/// file: src/hooks.server.js
/** @type {import('@sveltejs/kit').HandleFetch} */
export function handleFetch({ request, fetch }) {
	if (request.url.startsWith('https://api.yourapp.com/')) {
		// clone the original request, but change the URL
		request = new Request(
			request.url.replace('https://api.yourapp.com/', 'http://localhost:9999/'),
			request
		);
	}

	return fetch(request);
}
``` **Credentials** For same-origin requests, SvelteKit's `fetch` implementation will forward `cookie` and `authorization` headers unless the `credentials` option is set to `""omit""`. For cross-origin requests, `cookie` will be included if the request URL belongs to a subdomain of the app — for example if your app is on `my-domain.com`, and your API is on `api.my-domain.com`, cookies will be included in the request. If your app and your API are on sibling subdomains — `www.my-domain.com` and `api.my-domain.com` for example — then a cookie belonging to a common parent domain like `my-domain.com` will *not* be included, because SvelteKit has no way to know which domain the cookie belongs to. In these cases you will need to manually include the cookie using `handleFetch`: ```js
/// file: src/hooks.server.js
// @errors: 2345
/** @type {import('@sveltejs/kit').HandleFetch} */
export function handleFetch({ event, request, fetch }) {
	if (request.url.startsWith('https://api.my-domain.com/')) {
		request.headers.set('cookie', event.request.headers.get('cookie'));
	}

	return fetch(request);
}
``` "
2054a854,37,Shared hooks,Hooks > Shared hooks,/30-advanced/20-hooks.md,The following can be added to `src/hooks.server.js` *and* `src/hooks.client.js`: 
25152115,881,handleError,Hooks > Shared hooks > handleError,/30-advanced/20-hooks.md,"If an unexpected error is thrown during loading or rendering, this function will be called with the `error` and the `event`. This allows for two things: *   you can log the error
*   you can generate a custom representation of the error that is safe to show to users, omitting sensitive details like messages and stack traces. The returned value becomes the value of `$page.error`. It defaults to `{ message: 'Not Found' }` in case of a 404 (you can detect them through `event.route.id` being `null`) and to `{ message: 'Internal Error' }` for everything else. To make this type-safe, you can customize the expected shape by declaring an `App.Error` interface (which must include `message: string`, to guarantee sensible fallback behavior). The following code shows an example of typing the error shape as `{ message: string; errorId: string }` and returning it accordingly from the `handleError` functions: ```ts
/// file: src/app.d.ts
declare global {
	namespace App {
		interface Error {
			message: string;
			errorId: string;
		}
	}
}

export {};
``` ```js
/// file: src/hooks.server.js
// @errors: 2322
// @filename: ambient.d.ts
declare module '@sentry/node' {
	export const init: (opts: any) => void;
	export const captureException: (error: any, opts: any) => void;
}

// @filename: index.js
// 
import * as Sentry from '@sentry/node';
import crypto from 'crypto';

Sentry.init({/*...*/})

/** @type {import('@sveltejs/kit').HandleServerError} */
export function handleError({ error, event }) {
	const errorId = crypto.randomUUID();
	// example integration with https://sentry.io/
	Sentry.captureException(error, { event, errorId });

	return {
		message: 'Whoops!',
		errorId
	};
}
``` ```js
/// file: src/hooks.client.js
// @errors: 2322
// @filename: ambient.d.ts
declare module '@sentry/svelte' {
	export const init: (opts: any) => void;
	export const captureException: (error: any, opts: any) => void;
}

// @filename: index.js
// 
import * as Sentry from '@sentry/svelte';

Sentry.init({/*...*/})

/** @type {import('@sveltejs/kit').HandleClientError} */
export function handleError({ error, event }) {
	const errorId = crypto.randomUUID();
	// example integration with https://sentry.io/
	Sentry.captureException(error, { event, errorId });

	return {
		message: 'Whoops!',
		errorId
	};
}
``` > In `src/hooks.client.js`, the type of `handleError` is `HandleClientError` instead of `HandleServerError`, and `event` is a `NavigationEvent` rather than a `RequestEvent`. This function is not called for *expected* errors (those thrown with the [`error`](modules#sveltejs-kit-error) function imported from `@sveltejs/kit`). During development, if an error occurs because of a syntax error in your Svelte code, the passed in error has a `frame` property appended highlighting the location of the error. > Make sure that `handleError` *never* throws an error "
aa4a864a,41,Errors,Errors,/30-advanced/25-errors.md,"Errors are an inevitable fact of software development. SvelteKit handles errors differently depending on where they occur, what kind of errors they are, and the nature of the incoming request. "
e3351975,90,Error objects,Errors > Error objects,/30-advanced/25-errors.md,"SvelteKit distinguishes between expected and unexpected errors, both of which are represented as simple `{ message: string }` objects by default. You can add additional properties, like a `code` or a tracking `id`, as shown in the examples below. (When using TypeScript this requires you to redefine the `Error` type as described in  [type safety](errors#type-safety)). "
c9ff69ff,462,Expected errors,Errors > Expected errors,/30-advanced/25-errors.md,"An *expected* error is one created with the [`error`](modules#sveltejs-kit-error) helper imported from `@sveltejs/kit`: ```js
/// file: src/routes/blog/[slug]/+page.server.js
// @filename: ambient.d.ts
declare module '$lib/server/database' {
	export function getPost(slug: string): Promise<{ title: string, content: string } | undefined>
}

// @filename: index.js
// 
import { error } from '@sveltejs/kit';
import * as db from '$lib/server/database';

/** @type {import('./$types').PageServerLoad} */
export async function load({ params }) {
	const post = await db.getPost(params.slug);

	if (!post) {
		throw error(404, {
			message: 'Not found'
		});
	}

	return { post };
}
``` This tells SvelteKit to set the response status code to 404 and render an [`+error.svelte`](routing#error) component, where `$page.error` is the object provided as the second argument to `error(...)`. ```svelte
/// file: src/routes/+error.svelte
<script>
	import { page } from '$app/stores';
</script>

<h1>{$page.error.message}</h1>
``` You can add extra properties to the error object if needed... ```diff
throw error(404, {
	message: 'Not found',
+	code: 'NOT_FOUND'
});
``` ...otherwise, for convenience, you can pass a string as the second argument: ```diff
-throw error(404, { message: 'Not found' });
+throw error(404, 'Not found');
``` "
de944e94,379,Unexpected errors,Errors > Unexpected errors,/30-advanced/25-errors.md,"An *unexpected* error is any other exception that occurs while handling a request. Since these can contain sensitive information, unexpected error messages and stack traces are not exposed to users. By default, unexpected errors are printed to the console (or, in production, your server logs), while the error that is exposed to the user has a generic shape: ```json
{ ""message"": ""Internal Error"" }
``` Unexpected errors will go through the [`handleError`](hooks#shared-hooks-handleerror) hook, where you can add your own error handling — for example, sending errors to a reporting service, or returning a custom error object. ```js
/// file: src/hooks.server.js
// @errors: 2322 1360 2571 2339
// @filename: ambient.d.ts
declare module '@sentry/node' {
	export const init: (opts: any) => void;
	export const captureException: (error: any, opts: any) => void;
}

// @filename: index.js
// 
import * as Sentry from '@sentry/node';

Sentry.init({/*...*/})

/** @type {import('@sveltejs/kit').HandleServerError} */
export function handleError({ error, event }) {
	// example integration with https://sentry.io/
	Sentry.captureException(error, { event });

	return {
		message: 'Whoops!',
		code: error?.code ?? 'UNKNOWN'
	};
}
``` > Make sure that `handleError` *never* throws an error "
78511651,410,Responses,Errors > Responses,/30-advanced/25-errors.md,"If an error occurs inside `handle` or inside a [`+server.js`](routing#server) request handler, SvelteKit will respond with either a fallback error page or a JSON representation of the error object, depending on the request's `Accept` headers. You can customise the fallback error page by adding a `src/error.html` file: ```html
<!DOCTYPE html>
<html lang=""en"">
	<head>
		<meta charset=""utf-8"" />
		<title>%sveltekit.error.message%</title>
	</head>
	<body>
		<h1>My custom error page</h1>
		<p>Status: %sveltekit.status%</p>
		<p>Message: %sveltekit.error.message%</p>
	</body>
</html>
``` SvelteKit will replace `%sveltekit.status%` and `%sveltekit.error.message%` with their corresponding values. If the error instead occurs inside a `load` function while rendering a page, SvelteKit will render the [`+error.svelte`](routing#error) component nearest to where the error occurred. If the error occurs inside a `load` function in `+layout(.server).js`, the closest error boundary in the tree is an `+error.svelte` file *above* that layout (not next to it). The exception is when the error occurs inside the root `+layout.js` or `+layout.server.js`, since the root layout would ordinarily *contain* the `+error.svelte` component. In this case, SvelteKit uses the fallback error page. "
18f448f4,143,Type safety,Errors > Type safety,/30-advanced/25-errors.md,"If you're using TypeScript and need to customize the shape of errors, you can do so by declaring an `App.Error` interface in your app (by convention, in `src/app.d.ts`, though it can live anywhere that TypeScript can 'see'): ```diff
/// file: src/app.d.ts
declare global {
	namespace App {
		interface Error {
+			code: string;
+			id: string;
		}
	}
}

export {};
``` This interface always includes a `message: string` property. "
9db129b1,141,Link options,Link options,/30-advanced/30-link-options.md,"In SvelteKit, `<a>` elements (rather than framework-specific `<Link>` components) are used to navigate between the routes of your app. If the user clicks on a link whose `href` is 'owned' by the app (as opposed to, say, a link to an external site) then SvelteKit will navigate to the new page by importing its code and then calling any `load` functions it needs to fetch data. You can customise the behaviour of links with `data-sveltekit-*` attributes. These can be applied to the `<a>` itself, or to a parent element. "
30b79d37,539,data-sveltekit-preload-data,Link options > data-sveltekit-preload-data,/30-advanced/30-link-options.md,"Before the browser registers that the user has clicked on a link, we can detect that they've hovered the mouse over it (on desktop) or that a `touchstart` or `mousedown` event was triggered. In both cases, we can make an educated guess that a `click` event is coming. SvelteKit can use this information to get a head start on importing the code and fetching the page's data, which can give us an extra couple of hundred milliseconds — the difference between a user interface that feels laggy and one that feels snappy. We can control this behaviour with the `data-sveltekit-preload-data` attribute, which can have one of two values: *   `""hover""` means that preloading will start if the mouse comes to a rest over a link. On mobile, preloading begins on `touchstart`
*   `""tap""` means that preloading will start as soon as a `touchstart` or `mousedown` event is registered The default project template has a `data-sveltekit-preload-data=""hover""` attribute applied to the `<body>` element in `src/app.html`, meaning that every link is preloaded on hover by default: ```html
<body data-sveltekit-preload-data=""hover"">
	<div style=""display: contents"">%sveltekit.body%</div>
</body>
``` Sometimes, calling `load` when the user hovers over a link might be undesirable, either because it's likely to result in false positives (a click needn't follow a hover) or because data is updating very quickly and a delay could mean staleness. In these cases, you can specify the `""tap""` value, which causes SvelteKit to call `load` only when the user taps or clicks on a link: ```html
<a data-sveltekit-preload-data=""tap"" href=""/stonks"">
	Get current stonk values
</a>
``` > You can also programmatically invoke `preloadData` from `$app/navigation`. Data will never be preloaded if the user has chosen reduced data usage, meaning [`navigator.connection.saveData`](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData) is `true`. "
9a1a941a,327,data-sveltekit-preload-code,Link options > data-sveltekit-preload-code,/30-advanced/30-link-options.md,"Even in cases where you don't want to preload *data* for a link, it can be beneficial to preload the *code*. The `data-sveltekit-preload-code` attribute works similarly to `data-sveltekit-preload-data`, except that it can take one of four values, in decreasing 'eagerness': *   `""eager""` means that links will be preloaded straight away
*   `""viewport""` means that links will be preloaded once they enter the viewport
*   `""hover""` - as above, except that only code is preloaded
*   `""tap""` - as above, except that only code is preloaded Note that `viewport` and `eager` only apply to links that are present in the DOM immediately following navigation — if a link is added later (in an `{#if ...}` block, for example) it will not be preloaded until triggered by `hover` or `tap`. This is to avoid performance pitfalls resulting from aggressively observing the DOM for changes. > Since preloading code is a prerequisite for preloading data, this attribute will only have an effect if it specifies a more eager value than any `data-sveltekit-preload-data` attribute that is present. As with `data-sveltekit-preload-data`, this attribute will be ignored if the user has chosen reduced data usage. "
e6509050,132,data-sveltekit-reload,Link options > data-sveltekit-reload,/30-advanced/30-link-options.md,"Occasionally, we need to tell SvelteKit not to handle a link, but allow the browser to handle it. Adding a `data-sveltekit-reload` attribute to a link... ```html
<a data-sveltekit-reload href=""/path"">Path</a>
``` ...will cause a full-page navigation when the link is clicked. Links with a `rel=""external""` attribute will receive the same treatment. In addition, they will be ignored during [prerendering](page-options#prerender). "
c171ad71,149,data-sveltekit-noscroll,Link options > data-sveltekit-noscroll,/30-advanced/30-link-options.md,"When navigating to internal links, SvelteKit mirrors the browser's default navigation behaviour: it will change the scroll position to 0,0 so that the user is at the very top left of the page (unless the link includes a `#hash`, in which case it will scroll to the element with a matching ID). In certain cases, you may wish to disable this behaviour. Adding a `data-sveltekit-noscroll` attribute to a link... ```html
<a href=""path"" data-sveltekit-noscroll>Path</a>
``` ...will prevent scrolling after the link is clicked. "
810b8d0b,245,Disabling options,Link options > Disabling options,/30-advanced/30-link-options.md,"To disable any of these options inside an element where they have been enabled, use the `""off""` value: ```html
<div data-sveltekit-preload-data>
	<!-- these links will be preloaded -->
	<a href=""/a"">a</a>
	<a href=""/b"">b</a>
	<a href=""/c"">c</a>

	<div data-sveltekit-preload-data=""off"">
		<!-- these links will NOT be preloaded -->
		<a href=""/d"">d</a>
		<a href=""/e"">e</a>
		<a href=""/f"">f</a>
	</div>
</div>
``` To apply an attribute to an element conditionally, do this: ```html
<div data-sveltekit-reload={shouldReload ? '' : 'off'}>
``` > This works because in HTML, `<element attribute>` is equivalent to `<element attribute="""">` "
13c14bc1,246,Service workers,Service workers,/30-advanced/40-service-workers.md,"Service workers act as proxy servers that handle network requests inside your app. This makes it possible to make your app work offline, but even if you don't need offline support (or can't realistically implement it because of the type of app you're building), it's often worth using service workers to speed up navigation by precaching your built JS and CSS. In SvelteKit, if you have a `src/service-worker.js` file (or `src/service-worker.ts`, `src/service-worker/index.js`, etc) it will be bundled and automatically registered. You can change the [location of your service worker](configuration#files) if you need to. You can [disable automatic registration](configuration#serviceworker) if you need to register the service worker with your own logic or use another solution. The default registration looks something like this: ```js
if ('serviceWorker' in navigator) {
	addEventListener('load', function () {
		navigator.serviceWorker.register('./path/to/service-worker.js');
	});
}
``` "
a3d549d5,710,Inside the service worker,Service workers > Inside the service worker,/30-advanced/40-service-workers.md,"Inside the service worker you have access to the [`$service-worker` module](modules#$service-worker), which provides you with the paths to all static assets, build files and prerendered pages. You're also provided with an app version string which you can use for creating a unique cache name. If your Vite config specifies `define` (used for global variable replacements), this will be applied to service workers as well as your server/client builds. The following example caches the built app and any files in `static` eagerly, and caches all other requests as they happen. This would make each page work offline once visited. ```js
// @errors: 2339
/// <reference types=""@sveltejs/kit"" />
import { build, files, version } from '$service-worker';

// Create a unique cache name for this deployment
const CACHE = `cache-${version}`;

const ASSETS = [
	...build, // the app itself
	...files  // everything in `static`
];

self.addEventListener('install', (event) => {
	// Create a new cache and add all files to it
	async function addFilesToCache() {
		const cache = await caches.open(CACHE);
		await cache.addAll(ASSETS);
	}

	event.waitUntil(addFilesToCache());
});

self.addEventListener('activate', (event) => {
	// Remove previous cached data from disk
	async function deleteOldCaches() {
		for (const key of await caches.keys()) {
			if (key !== CACHE) await caches.delete(key);
		}
	}

	event.waitUntil(deleteOldCaches());
});

self.addEventListener('fetch', (event) => {
	// ignore POST requests etc
	if (event.request.method !== 'GET') return;

	async function respond() {
		const url = new URL(event.request.url);
		const cache = await caches.open(CACHE);

		// `build`/`files` can always be served from the cache
		if (ASSETS.includes(url.pathname)) {
			return cache.match(event.request);
		}

		// for everything else, try the network first, but
		// fall back to the cache if we're offline
		try {
			const response = await fetch(event.request);

			if (response.status === 200) {
				cache.put(event.request, response.clone());
			}

			return response;
		} catch {
			return cache.match(event.request);
		}
	}

	event.respondWith(respond());
});
``` > Be careful when caching! In some cases, stale data might be worse than data that's unavailable while offline. Since browsers will empty caches if they get too full, you should also be careful about caching large assets like video files. "
62728472,152,During development,Service workers > During development,/30-advanced/40-service-workers.md,"The service worker is bundled for production, but not during development. For that reason, only browsers that support [modules in service workers](https://web.dev/es-modules-in-sw) will be able to use them at dev time. If you are manually registering your service worker, you will need to pass the `{ type: 'module' }` option in development: ```js
import { dev } from '$app/environment';

navigator.serviceWorker.register('/service-worker.js', {
	type: dev ? 'module' : 'classic'
});
``` > `build` and `prerendered` are empty arrays during development "
1be257e2,301,Type safety,Service workers > Type safety,/30-advanced/40-service-workers.md,"Setting up proper types for service workers requires some manual setup. Inside your `service-worker.js`, add the following to the top of your file: ```original-js
/// <reference types=""@sveltejs/kit"" />
/// <reference no-default-lib=""true""/>
/// <reference lib=""esnext"" />
/// <reference lib=""webworker"" />

const sw = /** @type {ServiceWorkerGlobalScope} */ (/** @type {unknown} */ (self));
``` ```generated-ts
/// <reference types=""@sveltejs/kit"" />
/// <reference no-default-lib=""true""/>
/// <reference lib=""esnext"" />
/// <reference lib=""webworker"" />

const sw = self as unknown as ServiceWorkerGlobalScope;
``` This disables access to DOM typings like `HTMLElement` which are not available inside a service worker and instantiates the correct globals. The reassignment of `self` to `sw` allows you to type cast it in the process (there are a couple of ways to do this, but the easiest that requires no additional files). Use `sw` instead of `self` in the rest of the file. The reference to the SvelteKit types ensures that the `$service-worker` import has proper type definitions. "
a19ca19c,148,Other solutions,Service workers > Other solutions,/30-advanced/40-service-workers.md,"SvelteKit's service worker implementation is deliberately low-level. If you need a more full-flegded but also more opinionated solution, we recommend looking at solutions like [Vite PWA plugin](https://vite-pwa-org.netlify.app/frameworks/sveltekit.html), which uses [Workbox](https://web.dev/learn/pwa/workbox). For more general information on service workers, we recommend [the MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers). "
ed005600,73,Server-only modules,Server-only modules,/30-advanced/50-server-only-modules.md,"Like a good friend, SvelteKit keeps your secrets. When writing your backend and frontend in the same repository, it can be easy to accidentally import sensitive data into your front-end code (environment variables containing API keys, for example). SvelteKit provides a way to prevent this entirely: server-only modules. "
8c753275,98,Private environment variables,Server-only modules > Private environment variables,/30-advanced/50-server-only-modules.md,"The `$env/static/private` and `$env/dynamic/private` modules, which are covered in the [modules](modules) section, can only be imported into modules that only run on the server, such as [`hooks.server.js`](hooks#server-hooks) or [`+page.server.js`](routing#page-page-server-js). "
3a54be54,74,Your modules,Server-only modules > Your modules,/30-advanced/50-server-only-modules.md,"You can make your own modules server-only in two ways: *   adding `.server` to the filename, e.g. `secrets.server.js`
*   placing them in `$lib/server`, e.g. `$lib/server/secrets.js` "
e1f235f2,443,How it works,Server-only modules > How it works,/30-advanced/50-server-only-modules.md,"Any time you have public-facing code that imports server-only code (whether directly or indirectly)... ```js
// @errors: 7005
/// file: $lib/server/secrets.js
export const atlantisCoordinates = [/* redacted */];
``` ```js
// @errors: 2307 7006 7005
/// file: src/routes/utils.js
export { atlantisCoordinates } from '$lib/server/secrets.js';

export const add = (a, b) => a + b;
``` ```html
/// file: src/routes/+page.svelte
<script>
	import { add } from './utils.js';
</script>
``` ...SvelteKit will error:     Cannot import $lib/server/secrets.js into public-facing code:
    - src/routes/+page.svelte
    	- src/routes/utils.js
    		- $lib/server/secrets.js Even though the public-facing code — `src/routes/+page.svelte` — only uses the `add` export and not the secret `atlantisCoordinates` export, the secret code could end up in JavaScript that the browser downloads, and so the import chain is considered unsafe. This feature also works with dynamic imports, even interpolated ones like ``await import(`./${foo}.js`)``, with one small caveat: during development, if there are two or more dynamic imports between the public-facing code and the server-only module, the illegal import will not be detected the first time the code is loaded. > Unit testing frameworks like Vitest do not distinguish between server-only and public-facing code. For this reason, illegal import detection is disabled when running tests, as determined by `process.env.TEST === 'true'`. "
1521c521,216,Caching and inlining,Asset handling > Caching and inlining,/30-advanced/60-assets.md,"[Vite will automatically process imported assets](https://vitejs.dev/guide/assets.html) for improved performance. Hashes will be added to the filenames so that they can be cached and assets smaller than `assetsInlineLimit` will be inlined. ```html
<script>
	import logo from '$lib/assets/logo.png';
</script>

<img alt=""The project logo"" src={logo} />
``` If you prefer to reference assets directly in the markup, you can use a preprocessor such as [svelte-preprocess-import-assets](https://github.com/bluwy/svelte-preprocess-import-assets). For assets included via the CSS `url()` function, you may find [`vitePreprocess`](https://kit.svelte.dev/docs/integrations#preprocessors-vitepreprocess) useful. "
a2f2d6f2,120,Transforming,Asset handling > Transforming,/30-advanced/60-assets.md,"You may wish to transform your images to output compressed image formats such as `.webp` or `.avif`, responsive images with different sizes for different devices, or images with the EXIF data stripped for privacy. For images that are included statically, you may use a Vite plugin such as [vite-imagetools](https://github.com/JonasKruckenberg/imagetools). You may also consider a CDN, which can serve the appropriate transformed image based on the `Accept` HTTP header and query string parameters. "
9c00ec00,439,Snapshots,Snapshots,/30-advanced/65-snapshots.md,"Ephemeral DOM state — like scroll positions on sidebars, the content of `<input>` elements and so on — is discarded when you navigate from one page to another. For example, if the user fills out a form but clicks a link before submitting, then hits the browser's back button, the values they filled in will be lost. In cases where it's valuable to preserve that input, you can take a *snapshot* of DOM state, which can then be restored if the user navigates back. To do this, export a `snapshot` object with `capture` and `restore` methods from a `+page.svelte` or `+layout.svelte`: ```svelte
/// file: +page.svelte
<script>
	let comment = '';

	/** @type {import('./$types').Snapshot<string>} */
	export const snapshot = {
		capture: () => comment,
		restore: (value) => comment = value
	};
</script>

<form method=""POST"">
	<label for=""comment"">Comment</label>
	<textarea id=""comment"" bind:value={comment} />
	<button>Post comment</button>
</form>
``` When you navigate away from this page, the `capture` function is called immediately before the page updates, and the returned value is associated with the current entry in the browser's history stack. If you navigate back, the `restore` function is called with the stored value as soon as the page is updated. The data must be serializable as JSON so that it can be persisted to `sessionStorage`. This allows the state to be restored when the page is reloaded, or when the user navigates back from a different site. > Avoid returning very large objects from `capture` — once captured, objects will be retained in memory for the duration of the session, and in extreme cases may be too large to persist to `sessionStorage`. "
76e176e,440,Packaging,Packaging,/30-advanced/70-packaging.md,"You can use SvelteKit to build apps as well as component libraries, using the `@sveltejs/package` package (`npm create svelte` has an option to set this up for you). When you're creating an app, the contents of `src/routes` is the public-facing stuff; [`src/lib`](modules#$lib) contains your app's internal library. A component library has the exact same structure as a SvelteKit app, except that `src/lib` is the public-facing bit, and your root `package.json` is used to publish the package. `src/routes` might be a documentation or demo site that accompanies the library, or it might just be a sandbox you use during development. Running the `svelte-package` command from `@sveltejs/package` will take the contents of `src/lib` and generate a `dist` directory (which can be [configured](#options)) containing the following: *   All the files in `src/lib`. Svelte components will be preprocessed, TypeScript files will be transpiled to JavaScript.
*   Type definitions (`d.ts` files) which are generated for Svelte, JavaScript and TypeScript files. You need to install `typescript >= 4.0.0` for this. Type definitions are placed next to their implementation, hand-written `d.ts` files are copied over as is. You can [disable generation](#options), but we strongly recommend against it — people using your library might use TypeScript, for which they require these type definition files. > `@sveltejs/package` version 1 generated a `package.json`. This is no longer the case and it will now use the `package.json` from your project and validate that it is correct instead. If you're still on version 1, see [this PR](https://github.com/sveltejs/kit/pull/8922) for migration instructions. "
6d04dd04,75,Anatomy of a package.json,Packaging > Anatomy of a package.json,/30-advanced/70-packaging.md,"Since you're now building a library for public use, the contents of your `package.json` will become more important. Through it, you configure the entry points of your package, which files are published to npm, and which dependencies your library has. Let's go through the most important fields one by one. "
11627962,106,name,Packaging > Anatomy of a package.json > name,/30-advanced/70-packaging.md,"This is the name of your package. It will be available for others to install using that name, and visible on `https://npmjs.com/package/<name>`. ```json
{
	""name"": ""your-library""
}
``` Read more about it [here](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#name). "
aec07640,123,license,Packaging > Anatomy of a package.json > license,/30-advanced/70-packaging.md,"Every package should have a license field so people know how they are allowed to use it. A very popular license which is also very permissive in terms of distribution and reuse without warranty is `MIT`. ```json
{
	""license"": ""MIT""
}
``` Read more about it [here](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#license). Note that you should also include a `LICENSE` file in your package. "
772df72d,176,files,Packaging > Anatomy of a package.json > files,/30-advanced/70-packaging.md,"This tells npm which files it will pack up and upload to npm. It should contain your output folder (`dist` by default). Your `package.json` and `README` and `LICENSE` will always be included, so you don't need to specify them. ```json
{
	""files"": [""dist""]
}
``` To exclude unnecessary files (such as unit tests, or modules that are only imported from `src/routes` etc) you can add them to an `.npmignore` file. This will result in smaller packages that are faster to install. Read more about it [here](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#files). "
7ad81ad8,728,exports,Packaging > Anatomy of a package.json > exports,/30-advanced/70-packaging.md,"The `""exports""` field contains the package's entry points. If you set up a new library project through `npm create svelte@latest`, it's set to a single export, the package root: ```json
{
	""exports"": {
		""."": {
			""types"": ""./dist/index.d.ts"",
			""svelte"": ""./dist/index.js""
		}
	}
}
``` This tells bundlers and tooling that your package only has one entry point, the root, and everything should be imported through that, like this: ```js
// @errors: 2307
import { Something } from 'your-library';
``` The `types` and `svelte` keys are [export conditions](https://nodejs.org/api/packages.html#conditional-exports). They tell tooling what file to import when they look up the `your-library` import: *   TypeScript sees the `types` condition and looks up the type definition file. If you don't publish type definitions, omit this condition.
*   Svelte-aware tooling sees the `svelte` condition and knows this is a Svelte component library. If you publish a library that does not export any Svelte components and that could also work in non-Svelte projects (for example a Svelte store library), you can replace this condition with `default`. > Previous versions of `@sveltejs/package` also added a `package.json` export. This is no longer part of the template because all tooling can now deal with a `package.json` not being explicitly exported. You can adjust `exports` to your liking and provide more entry points. For example, if instead of a `src/lib/index.js` file that re-exported components you wanted to expose a `src/lib/Foo.svelte` component directly, you could create the following export map... ```json
{
	""exports"": {
		""./Foo.svelte"": {
			""types"": ""./dist/Foo.svelte.d.ts"",
			""svelte"": ""./dist/Foo.svelte""
		}
	}
}
``` ...and a consumer of your library could import the component like so: ```js
// @filename: ambient.d.ts
declare module 'your-library/Foo.svelte';

// @filename: index.js
// 
import Foo from 'your-library/Foo.svelte';
``` > Beware that doing this will need additional care if you provide type definitions. Read more about the caveat [here](#typescript) In general, each key of the exports map is the path the user will have to use to import something from your package, and the value is the path to the file that will be imported or a map of export conditions which in turn contains these file paths. Read more about `exports` [here](https://nodejs.org/docs/latest-v18.x/api/packages.html#package-entry-points). "
e69c769c,124,svelte,Packaging > Anatomy of a package.json > svelte,/30-advanced/70-packaging.md,"This is a legacy field that enabled tooling to recognise Svelte component libraries. It's no longer necessary when using the `svelte` [export condition](#anatomy-of-a-package-json-exports), but for backwards compatibility with outdated tooling that doesn't yet know about export conditions it's good to keep it around. It should point towards your root entry point. ```json
{
	""svelte"": ""./dist/index.js""
}
``` "
2940d140,754,TypeScript,Packaging > TypeScript,/30-advanced/70-packaging.md,"You should ship type definitions for your library even if you don't use TypeScript yourself so that people who do get proper intellisense when using your library. `@sveltejs/package` makes the process of generating types mostly opaque to you. By default, when packaging your library, type definitions are auto-generated for JavaScript, TypeScript and Svelte files. All you need to ensure is that the `types` condition in the [exports](#anatomy-of-a-package-json-exports) map points to the correct files. When initialising a library project through `npm create svelte@latest`, this is automatically setup for the root export. If you have something else than a root export however — for example providing a `your-library/foo` import — you need to take additional care for providing type definitions. Unfortunately, TypeScript by default will *not* resolve the `types` condition for an export like `{ ""./foo"": { ""types"": ""./dist/foo.d.ts"", ... }}`. Instead, it will search for a `foo.d.ts` relative to the root of your library (i.e. `your-library/foo.d.ts` instead of `your-library/dist/foo.d.ts`). To fix this, you have two options: The first option is to require people using your library to set the `moduleResolution` option in their `tsconfig/jsconfig.json` to `bundler` (available since TypeScript 5, the best and recommended option in the future), `node16` or `nodenext`. This opts TypeScript into actually looking at the exports map and resolving the types correctly. The second option is to (ab)use the `typesVersions` feature from TypeScript to wire up the types. This is a field inside `package.json` TypeScript uses to check for different type definitions depending on the TypeScript version, and also contains a path mapping feature for that. We leverage that path mapping feature to get what we want. For the mentioned `foo` export above, the corresponding `typesVersions` looks like this: ```json
{
	""exports"": {
		""./foo"": {
			""types"": ""./dist/foo.d.ts"",
			""svelte"": ""./dist/foo.js""
		}
	},
	""typesVersions"": {
		"">4.0"": {
			""foo"": [""./dist/foo.d.ts""]
		}
	}
}
``` `>4.0` tells TypeScript to check the inner map if the used TypeScript version is greater than 4 (which should in practice always be true). The inner map tells TypeScript that the typings for `your-library/foo` are found within `./dist/foo.d.ts`, which essentially replicates the `exports` condition. You also have `*` as a wildcard at your disposal to make many type definitions at once available without repeating yourself. Note that if you opt into `typesVersions` you have to declare all type imports through it, including the root import (which is defined as `""index"": [..]`). You can read more about that feature [here](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#version-selection-with-typesversions). "
6e1d001d,546,Best practices,Packaging > Best practices,/30-advanced/70-packaging.md,"You should avoid using [SvelteKit-specific modules](modules) like `$app` in your packages unless you intend for them to only be consumable by other SvelteKit projects. E.g. rather than using `import { browser } from '$app/environment'` you could use `import { BROWSER } from 'esm-env'` ([see esm-env docs](https://github.com/benmccann/esm-env)). You may also wish to pass in things like the current URL or a navigation action as a prop rather than relying directly on `$app/stores`, `$app/navigation`, etc. Writing your app in this more generic fashion will also make it easier to setup tools for testing, UI demos and so on. Ensure that you add [aliases](/docs/configuration#alias) via `svelte.config.js` (not `vite.config.js` or `tsconfig.json`), so that they are processed by `svelte-package`. You should think carefully about whether or not the changes you make to your package are a bug fix, a new feature, or a breaking change, and update the package version accordingly. Note that if you remove any paths from `exports` or any `export` conditions inside them from your existing library, that should be regarded as a breaking change. ```diff
{
	""exports"": {
		""."": {
			""types"": ""./dist/index.d.ts"",
// changing `svelte` to `default` is a breaking change:
-			""svelte"": ""./dist/index.js""
+			""default"": ""./dist/index.js""
		},
// removing this is a breaking change:
-		""./foo"": {
-			""types"": ""./dist/foo.d.ts"",
-			""svelte"": ""./dist/foo.js"",
-			""default"": ""./dist/foo.js""
-		},
// adding this is ok:
+		""./bar"": {
+			""types"": ""./dist/bar.d.ts"",
+			""svelte"": ""./dist/bar.js"",
+			""default"": ""./dist/bar.js""
+		}
	}
}
``` "
d83c143c,188,Options,Packaging > Options,/30-advanced/70-packaging.md,"`svelte-package` accepts the following options: *   `-w`/`--watch` — watch files in `src/lib` for changes and rebuild the package
*   `-i`/`--input` — the input directory which contains all the files of the package. Defaults to `src/lib`
*   `-o`/`--o` — the output directory where the processed files are written to. You `package.json`'s `exports` should point to files inside there, and the `files` array should include that folder. Defaults to `dist`
*   `-t`/`--types` — whether or not to create type definitions (`d.ts` files). We strongly recommend doing this as it fosters ecosystem library quality. Defaults to `true` "
6bbab1ba,22,Publishing,Packaging > Publishing,/30-advanced/70-packaging.md,"To publish the generated package: ```sh
npm publish
``` "
153ec33e,206,Caveats,Packaging > Caveats,/30-advanced/70-packaging.md,"All relative file imports need to be fully specified, adhering to Node's ESM algorithm. This means that for a file like `src/lib/something/index.js`, you must include the filename with the extension: ```diff
-import { something } from './something';
+import { something } from './something/index.js';

If you are using TypeScript, you need to import `.ts` files the same way, but using a `.js` file ending, _not_ a `.ts` file ending. (This is a TypeScript design decision outside our control.) Setting `""moduleResolution"": ""NodeNext""` in your `tsconfig.json` or `jsconfig.json` will help you with this.

All files except Svelte files (preprocessed) and TypeScript files (transpiled to JavaScript) are copied across as-is.
``` "
dca8e6a8,198,Accessibility,Accessibility,/40-best-practices/10-accessibility.md,"SvelteKit strives to provide an accessible platform for your app by default. Svelte's [compile-time accessibility checks](https://svelte.dev/docs#accessibility-warnings) will also apply to any SvelteKit application you build. Here's how SvelteKit's built-in accessibility features work and what you need to do to help these features to work as well as possible. Keep in mind that while SvelteKit provides an accessible foundation, you are still responsible for making sure your application code is accessible. If you're new to accessibility, see the [""further reading""](accessibility#further-reading) section of this guide for additional resources. We recognize that accessibility can be hard to get right. If you want to suggest improvements to how SvelteKit handles accessibility, please [open a GitHub issue](https://github.com/sveltejs/kit/issues). "
f261f361,314,Route announcements,Accessibility > Route announcements,/40-best-practices/10-accessibility.md,"In traditional server-rendered applications, every navigation (e.g. clicking on an `<a>` tag) triggers a full page reload. When this happens, screen readers and other assistive technology will read out the new page's title so that users understand that the page has changed. Since navigation between pages in SvelteKit happens without reloading the page (known as [client-side routing](glossary#routing)), SvelteKit injects a [live region](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions) onto the page that will read out the new page name after each navigation. This determines the page name to announce by inspecting the `<title>` element. Because of this behavior, every page in your app should have a unique, descriptive title. In SvelteKit, you can do this by placing a `<svelte:head>` element on each page: ```svelte
/// file: src/routes/+page.svelte
<svelte:head>
	<title>Todo List</title>
</svelte:head>
``` This will allow screen readers and other assistive technology to identify the new page after a navigation occurs. Providing a descriptive title is also important for [SEO](seo#manual-setup-title-and-meta). "
3a888288,455,Focus management,Accessibility > Focus management,/40-best-practices/10-accessibility.md,"In traditional server-rendered applications, every navigation will reset focus to the top of the page. This ensures that people browsing the web with a keyboard or screen reader will start interacting with the page from the beginning. To simulate this behavior during client-side routing, SvelteKit focuses the `<body>` element after each navigation and [enhanced form submission](https://kit.svelte.dev/docs/form-actions#progressive-enhancement). There is one exception - if an element with the [`autofocus`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) attribute is present, SvelteKit will focus that element instead. Make sure to [consider the implications for assistive technology](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus#accessibility_considerations) when using that attribute. If you want to customize SvelteKit's focus management, you can use the `afterNavigate` hook: ```js
/// <reference types=""@sveltejs/kit"" />
// 
import { afterNavigate } from '$app/navigation';

afterNavigate(() => {
	/** @type {HTMLElement | null} */
	const to_focus = document.querySelector('.focus-me');
	to_focus?.focus();
});
``` You can also programmatically navigate to a different page using the [`goto`](modules#$app-navigation-goto) function. By default, this will have the same client-side routing behavior as clicking on a link. However, `goto` also accepts a `keepFocus` option that will preserve the currently-focused element instead of resetting focus. If you enable this option, make sure the currently-focused element still exists on the page after navigation. If the element no longer exists, the user's focus will be lost, making for a confusing experience for assistive technology users. "
fb19f519,359,"The ""lang"" attribute","Accessibility > The ""lang"" attribute",/40-best-practices/10-accessibility.md,"By default, SvelteKit's page template sets the default language of the document to English. If your content is not in English, you should update the `<html>` element in `src/app.html` to have the correct [`lang`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang#accessibility) attribute. This will ensure that any assistive technology reading the document uses the correct pronunciation. For example, if your content is in German, you should update `app.html` to the following: ```html
/// file: src/app.html
<html lang=""de"">
``` If your content is available in multiple languages, you should set the `lang` attribute based on the language of the current page. You can do this with SvelteKit's [handle hook](hooks#server-hooks-handle): ```html
/// file: src/app.html
<html lang=""%lang%"">
``` ```js
/// file: src/hooks.server.js
/**
 * @param {import('@sveltejs/kit').RequestEvent} event
 */
function get_lang(event) {
	return 'en';
}
// 
/** @type {import('@sveltejs/kit').Handle} */
export function handle({ event, resolve }) {
	return resolve(event, {
		transformPageChunk: ({ html }) => html.replace('%lang%', get_lang(event))
	});
}
``` "
e415ac15,140,Further reading,Accessibility > Further reading,/40-best-practices/10-accessibility.md,"For the most part, building an accessible SvelteKit app is the same as building an accessible web app. You should be able to apply information from the following general accessibility resources to any web experience you build: *   [MDN Web Docs: Accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility)
*   [The A11y Project](https://www.a11yproject.com/)
*   [How to Meet WCAG (Quick Reference)](https://www.w3.org/WAI/WCAG21/quickref/) "
16d78457,42,SEO,SEO,/40-best-practices/20-seo.md,"The most important aspect of SEO is to create high-quality content that is widely linked to from around the web. However, there are a few technical considerations for building sites that rank well. "
996dd96,154,SSR,SEO > Out of the box > SSR,/40-best-practices/20-seo.md,"While search engines have got better in recent years at indexing content that was rendered with client-side JavaScript, server-side rendered content is indexed more frequently and reliably. SvelteKit employs SSR by default, and while you can disable it in [`handle`](hooks#server-hooks-handle), you should leave it on unless you have a good reason not to. > SvelteKit's rendering is highly configurable and you can implement [dynamic rendering](https://developers.google.com/search/docs/advanced/javascript/dynamic-rendering) if necessary. It's not generally recommended, since SSR has other benefits beyond SEO. "
ecf0f8f0,110,Performance,SEO > Out of the box > Performance,/40-best-practices/20-seo.md,"Signals such as [Core Web Vitals](https://web.dev/vitals/#core-web-vitals) impact search engine ranking. Because Svelte and SvelteKit introduce minimal overhead, it's easier to build high performance sites. You can test your site's performance using Google's [PageSpeed Insights](https://pagespeed.web.dev/) or [Lighthouse](https://developers.google.com/web/tools/lighthouse). "
ce230a23,55,Normalized URLs,SEO > Out of the box > Normalized URLs,/40-best-practices/20-seo.md,"SvelteKit redirects pathnames with trailing slashes to ones without (or vice versa depending on your [configuration](page-options#trailingslash)), as duplicate URLs are bad for SEO. "
ddd4add4,186,<title> and <meta>,SEO > Manual setup > <title> and <meta>,/40-best-practices/20-seo.md,"Every page should have well-written and unique `<title>` and `<meta name=""description"">` elements inside a [`<svelte:head>`](https://svelte.dev/docs#template-syntax-svelte-head). Guidance on how to write descriptive titles and descriptions, along with other suggestions on making content understandable by search engines, can be found on Google's [Lighthouse SEO audits](https://web.dev/lighthouse-seo/) documentation. > A common pattern is to return SEO-related `data` from page [`load`](load) functions, then use it (as [`$page.data`](modules#$app-stores)) in a `<svelte:head>` in your root [layout](routing#layout). "
4b8532c5,256,Structured data,SEO > Manual setup > Structured data,/40-best-practices/20-seo.md,"[Structured data](https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data) helps search engines understand the content of a page. If you're using structured data alongside [`svelte-preprocess`](https://github.com/sveltejs/svelte-preprocess), you will need to explicitly preserve `ld+json` data (this [may change in future](https://github.com/sveltejs/svelte-preprocess/issues/305)): ```js
/// file: svelte.config.js
// @filename: ambient.d.ts
declare module 'svelte-preprocess';

// @filename: index.js
// 
import preprocess from 'svelte-preprocess';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	preprocess: preprocess({
		preserve: ['ld+json']
		// ...
	})
};

export default config;
``` "
84614c61,385,Sitemaps,SEO > Manual setup > Sitemaps,/40-best-practices/20-seo.md,"[Sitemaps](https://developers.google.com/search/docs/advanced/sitemaps/build-sitemap) help search engines prioritize pages within your site, particularly when you have a large amount of content. You can create a sitemap dynamically using an endpoint: ```js
/// file: src/routes/sitemap.xml/+server.js
export async function GET() {
	return new Response(
		`
		<?xml version=""1.0"" encoding=""UTF-8"" ?>
		<urlset
			xmlns=""https://www.sitemaps.org/schemas/sitemap/0.9""
			xmlns:xhtml=""https://www.w3.org/1999/xhtml""
			xmlns:mobile=""https://www.google.com/schemas/sitemap-mobile/1.0""
			xmlns:news=""https://www.google.com/schemas/sitemap-news/0.9""
			xmlns:image=""https://www.google.com/schemas/sitemap-image/1.1""
			xmlns:video=""https://www.google.com/schemas/sitemap-video/1.1""
		>
			<!-- <url> elements go here -->
		</urlset>`.trim(),
		{
			headers: {
				'Content-Type': 'application/xml'
			}
		}
	);
}
``` "
5eb162b1,404,AMP,SEO > Manual setup > AMP,/40-best-practices/20-seo.md,"An unfortunate reality of modern web development is that it is sometimes necessary to create an [Accelerated Mobile Pages (AMP)](https://amp.dev/) version of your site. In SvelteKit this can be done by setting the [`inlineStyleThreshold`](configuration#inlinestylethreshold) option... ```js
/// file: svelte.config.js
/** @type {import('@sveltejs/kit').Config} */
const config = {
	kit: {
		// since <link rel=""stylesheet""> isn't
		// allowed, inline all styles
		inlineStyleThreshold: Infinity
	}
};

export default config;
``` ...disabling `csr` in your root `+layout.js`/`+layout.server.js`... ```js
/// file: src/routes/+layout.server.js
export const csr = false;
``` ...and transforming the HTML using `transformPageChunk` along with `transform` imported from `@sveltejs/amp`: ```js
import * as amp from '@sveltejs/amp';

/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	let buffer = '';
	return resolve(event, {
		transformPageChunk: ({ html, done }) => {
			buffer += html;
			if (done) return amp.transform(html);
		}
	});
}
``` > It's a good idea to use the `handle` hook to validate the transformed HTML using `amphtml-validator`, but only if you're prerendering pages since it's very slow. "
da884888,255,Configuration,Configuration,/50-reference/10-configuration.md,"Your project's configuration lives in a `svelte.config.js` file at the root of your project. As well as SvelteKit, this config object is used by other tooling that integrates with Svelte such as editor extensions. ```js
/// file: svelte.config.js
// @filename: ambient.d.ts
declare module '@sveltejs/adapter-auto' {
	const plugin: () => import('@sveltejs/kit').Adapter;
	export default plugin;
}

// @filename: index.js
// 
import adapter from '@sveltejs/adapter-auto';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	kit: {
		adapter: adapter()
	}
};

export default config;
``` > TYPES: @sveltejs/kit#Config The `kit` property configures SvelteKit, and can have the following properties: > EXPANDED\_TYPES: @sveltejs/kit#KitConfig "
9e2cb92c,106,Command Line Interface,Command Line Interface,/50-reference/20-cli.md,"SvelteKit projects use [Vite](https://vitejs.dev), meaning you'll mostly use its CLI (albeit via `npm run dev/build/preview` scripts): *   `vite dev` — start a development server
*   `vite build` — build a production version of your app
*   `vite preview` — run the production version locally However SvelteKit includes its own CLI for initialising your project: "
26873f87,92,svelte-kit sync,Command Line Interface > svelte-kit sync,/50-reference/20-cli.md,"`svelte-kit sync` creates the `tsconfig.json` and all generated types (which you can import as `./$types` inside routing files) for your project. When you create a new project, it is listed as the `prepare` script and will be run automatically as part of the npm lifecycle, so you should not ordinarily have to run this command. "
f68878c8,22,Modules,Modules,/50-reference/30-modules.md,SvelteKit makes a number of modules available to your application. > MODULES 
72e88ae8,35,Public types,Types > Public types,/50-reference/40-types.md,The following types can be imported from `@sveltejs/kit`: > TYPES: @sveltejs/kit 
cb31e731,30,Private types,Types > Private types,/50-reference/40-types.md,"The following are referenced by the public types documented above, but cannot be imported directly: > TYPES: Private types "
e7595f59,809,Generated types,Types > Generated types,/50-reference/40-types.md,"The `RequestHandler` and `Load` types both accept a `Params` argument allowing you to type the `params` object. For example this endpoint expects `foo`, `bar` and `baz` params: ```js
/// file: src/routes/[foo]/[bar]/[baz]/+page.server.js
// @errors: 2355 2322 1360
/** @type {import('@sveltejs/kit').RequestHandler<{
 *   foo: string;
 *   bar: string;
 *   baz: string
 * }>} */
export async function GET({ params }) {
	// ...
}
``` Needless to say, this is cumbersome to write out, and less portable (if you were to rename the `[foo]` directory to `[qux]`, the type would no longer reflect reality). To solve this problem, SvelteKit generates `.d.ts` files for each of your endpoints and pages: ```ts
/// file: .svelte-kit/types/src/routes/[foo]/[bar]/[baz]/$types.d.ts
/// link: false
import type * as Kit from '@sveltejs/kit';

type RouteParams = {
	foo: string;
	bar: string;
	baz: string;
}

export type PageServerLoad = Kit.ServerLoad<RouteParams>;
export type PageLoad = Kit.Load<RouteParams>;
``` These files can be imported into your endpoints and pages as siblings, thanks to the [`rootDirs`](https://www.typescriptlang.org/tsconfig#rootDirs) option in your TypeScript configuration: ```js
/// file: src/routes/[foo]/[bar]/[baz]/+page.server.js
// @filename: $types.d.ts
import type * as Kit from '@sveltejs/kit';

type RouteParams = {
	foo: string;
	bar: string;
	baz: string;
}

export type PageServerLoad = Kit.ServerLoad<RouteParams>;

// @filename: index.js
// @errors: 2355
// 
/** @type {import('./$types').PageServerLoad} */
export async function GET({ params }) {
	// ...
}
``` ```js
/// file: src/routes/[foo]/[bar]/[baz]/+page.js
// @filename: $types.d.ts
import type * as Kit from '@sveltejs/kit';

type RouteParams = {
	foo: string;
	bar: string;
	baz: string;
}

export type PageLoad = Kit.Load<RouteParams>;

// @filename: index.js
// @errors: 2355
// 
/** @type {import('./$types').PageLoad} */
export async function load({ params, fetch }) {
	// ...
}
``` > For this to work, your own `tsconfig.json` or `jsconfig.json` should extend from the generated `.svelte-kit/tsconfig.json` (where `.svelte-kit` is your [`outDir`](configuration#outdir)):
>
>     { ""extends"": ""./.svelte-kit/tsconfig.json"" } "
677a2fba,487,Default tsconfig.json,Types > Generated types > Default tsconfig.json,/50-reference/40-types.md,"The generated `.svelte-kit/tsconfig.json` file contains a mixture of options. Some are generated programmatically based on your project configuration, and should generally not be overridden without good reason: ```json
/// file: .svelte-kit/tsconfig.json
{
	""compilerOptions"": {
		""baseUrl"": "".."",
		""paths"": {
			""$lib"": ""src/lib"",
			""$lib/*"": ""src/lib/*""
		},
		""rootDirs"": ["".."", ""./types""]
	},
	""include"": [""../src/**/*.js"", ""../src/**/*.ts"", ""../src/**/*.svelte""],
	""exclude"": [""../node_modules/**"", ""./**""]
}
``` Others are required for SvelteKit to work properly, and should also be left untouched unless you know what you're doing: ```json
/// file: .svelte-kit/tsconfig.json
{
	""compilerOptions"": {
		// this ensures that types are explicitly
		// imported with `import type`, which is
		// necessary as svelte-preprocess cannot
		// otherwise compile components correctly
		""importsNotUsedAsValues"": ""error"",

		// Vite compiles one TypeScript module
		// at a time, rather than compiling
		// the entire module graph
		""isolatedModules"": true,

		// TypeScript cannot 'see' when you
		// use an imported value in your
		// markup, so we need this
		""preserveValueImports"": true,

		// This ensures both `vite build`
		// and `svelte-package` work correctly
		""lib"": [""esnext"", ""DOM"", ""DOM.Iterable""],
		""moduleResolution"": ""node"",
		""module"": ""esnext"",
		""target"": ""esnext""
	}
}
``` "
49fb51fb,11,App,Types > App,/50-reference/40-types.md,> TYPES: App 
54d410d4,103,Preprocessors,Integrations > Preprocessors,/60-appendix/05-integrations.md,"Preprocessors transform your `.svelte` files before passing them to the compiler. For example, if your `.svelte` file uses TypeScript and PostCSS, it must first be transformed into JavaScript and CSS so that the Svelte compiler can handle it. There are many [available preprocessors](https://sveltesociety.dev/tools#preprocessors). The Svelte team maintains two official ones discussed below. "
690b570b,196,,Integrations > Preprocessors,/60-appendix/05-integrations.md,"`vite-plugin-svelte` offers a [`vitePreprocess`](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/preprocess.md) feature which utilizes Vite for preprocessing. It is capable of handling the language flavors Vite handles: TypeScript, PostCSS, SCSS, Less, Stylus, and SugarSS. For convenience, it is re-exported from the `@sveltejs/kit/vite` package. If you set your project up with TypeScript it will be included by default: ```js
// svelte.config.js
import { vitePreprocess } from '@sveltejs/kit/vite';

export default {
  preprocess: [vitePreprocess()]
};
``` "
13ebd3eb,252,,Integrations > Preprocessors,/60-appendix/05-integrations.md,"`svelte-preprocess` has some additional functionality not found in `vitePreprocess` such as support for Pug, Babel, and global styles. However, `vitePreprocess` may be faster and require less configuration, so it is used by default. Note that CoffeeScript is [not supported](https://github.com/sveltejs/kit/issues/2920#issuecomment-996469815) by SvelteKit. You will need to install `svelte-preprocess` with `npm install --save-dev svelte-preprocess` and [add it to your `svelte.config.js`](https://github.com/sveltejs/svelte-preprocess/blob/main/docs/usage.md#with-svelte-config). After that, you will often need to [install the corresponding library](https://github.com/sveltejs/svelte-preprocess/blob/main/docs/getting-started.md) such as `npm install -D sass` or `npm install -D less`. "
25345534,111,Adders,Integrations > Adders,/60-appendix/05-integrations.md,"[Svelte Adders](https://sveltesociety.dev/templates#adders) allow you to setup many different complex integrations like Tailwind, PostCSS, Storybook, Firebase, GraphQL, mdsvex, and more with a single command. Please see [sveltesociety.dev](https://sveltesociety.dev/) for a full listing of templates, components, and tools available for use with Svelte and SvelteKit. "
73c45bc4,39,Integration FAQs,Integrations > Integration FAQs,/60-appendix/05-integrations.md,"The SvelteKit FAQ has a [section on integrations](/faq#integrations), which may be helpful if you still have questions. "
bdcf5dc,79,Migrating from Sapper,Migrating from Sapper,/60-appendix/10-migrating.md,"SvelteKit is the successor to Sapper and shares many elements of its design. If you have an existing Sapper app that you plan to migrate to SvelteKit, there are a number of changes you will need to make. You may find it helpful to view [some examples](additional-resources#examples) while migrating. "
cb233323,63,"type: ""module""","Migrating from Sapper > package.json > type: ""module""",/60-appendix/10-migrating.md,"Add `""type"": ""module""` to your `package.json`. You can do this step separately from the rest as part of an incremental migration if you are using Sapper 0.29.3
or newer. "
84539c53,47,dependencies,Migrating from Sapper > package.json > dependencies,/60-appendix/10-migrating.md,"Remove `polka` or `express`, if you're using one of those, and any middleware such as `sirv` or `compression`. "
f9300330,73,devDependencies,Migrating from Sapper > package.json > devDependencies,/60-appendix/10-migrating.md,Remove `sapper` from your `devDependencies` and replace it with `@sveltejs/kit` and whichever [adapter](adapters) you plan to use (see [next section](migrating#project-files-configuration)). 
6b2f392f,112,scripts,Migrating from Sapper > package.json > scripts,/60-appendix/10-migrating.md,"Any scripts that reference `sapper` should be updated: *   `sapper build` should become `vite build` using the Node [adapter](adapters)
*   `sapper export` should become `vite build` using the static [adapter](adapters)
*   `sapper dev` should become `vite dev`
*   `node __sapper__/build` should become `node build` "
22a248a2,44,Project files,Migrating from Sapper > Project files,/60-appendix/10-migrating.md,"The bulk of your app, in `src/routes`, can be left where it is, but several project files will need to be moved or updated. "
626862,238,Configuration,Migrating from Sapper > Project files > Configuration,/60-appendix/10-migrating.md,"Your `webpack.config.js` or `rollup.config.js` should be replaced with a `svelte.config.js`, as documented [here](configuration). Svelte preprocessor options should be moved to `config.preprocess`. You will need to add an [adapter](adapters). `sapper build` is roughly equivalent to [adapter-node](https://github.com/sveltejs/kit/tree/master/packages/adapter-node) while `sapper export` is roughly equivalent to [adapter-static](https://github.com/sveltejs/kit/tree/master/packages/adapter-static), though you might prefer to use an adapter designed for the platform you're deploying to. If you were using plugins for filetypes that are not automatically handled by [Vite](https://vitejs.dev), you will need to find Vite equivalents and add them to the [Vite config](project-structure#project-files-vite-config-js). "
4df321f3,66,src/client.js,Migrating from Sapper > Project files > src/client.js,/60-appendix/10-migrating.md,"This file has no equivalent in SvelteKit. Any custom logic (beyond `sapper.start(...)`) should be expressed in your `+layout.svelte` file, inside an `onMount` callback. "
fb644b64,67,src/server.js,Migrating from Sapper > Project files > src/server.js,/60-appendix/10-migrating.md,"When using `adapter-node` the equivalent is a [custom server](/docs/adapter-node#custom-server). Otherwise, this file has no direct equivalent, since SvelteKit apps can run in serverless environments. "
86cd27cd,93,src/service-worker.js,Migrating from Sapper > Project files > src/service-worker.js,/60-appendix/10-migrating.md,"Most imports from `@sapper/service-worker` have equivalents in [`$service-worker`](modules#$service-worker): *   `files` is unchanged
*   `routes` has been removed
*   `shell` is now `build`
*   `timestamp` is now `version` "
8cdf7fdf,117,src/template.html,Migrating from Sapper > Project files > src/template.html,/60-appendix/10-migrating.md,"The `src/template.html` file should be renamed `src/app.html`. Remove `%sapper.base%`, `%sapper.scripts%` and `%sapper.styles%`. Replace `%sapper.head%` with `%sveltekit.head%` and `%sapper.html%` with `%sveltekit.body%`. The `<div id=""sapper"">` is no longer necessary. "
2560c960,65,src/node_modules,Migrating from Sapper > Project files > src/node_modules,/60-appendix/10-migrating.md,"A common pattern in Sapper apps is to put your internal library in a directory inside `src/node_modules`. This doesn't work with Vite, so we use [`src/lib`](modules#$lib) instead. "
5bc4e5c4,242,Renamed files,Migrating from Sapper > Pages and layouts > Renamed files,/60-appendix/10-migrating.md,"Routes now are made up of the folder name exclusively to remove ambiguity, the folder names leading up to a `+page.svelte` correspond to the route. See [the routing docs](routing) for an overview. The following shows a old/new comparison: | Old                       | New                       |
| ------------------------- | ------------------------- |
| routes/about/index.svelte | routes/about/+page.svelte |
| routes/about.svelte       | routes/about/+page.svelte | Your custom error page component should be renamed from `_error.svelte` to `+error.svelte`. Any `_layout.svelte` files should likewise be renamed `+layout.svelte`. [Any other files are ignored](routing#other-files). "
9dc367c3,153,Imports,Migrating from Sapper > Pages and layouts > Imports,/60-appendix/10-migrating.md,"The `goto`, `prefetch` and `prefetchRoutes` imports from `@sapper/app` should be replaced with `goto`, `preloadData` and `preloadCode` imports respectively from [`$app/navigation`](modules#$app-navigation). The `stores` import from `@sapper/app` should be replaced — see the [Stores](migrating#pages-and-layouts-stores) section below. Any files you previously imported from directories in `src/node_modules` will need to be replaced with [`$lib`](modules#$lib) imports. "
ff521d52,208,Preload,Migrating from Sapper > Pages and layouts > Preload,/60-appendix/10-migrating.md,"As before, pages and layouts can export a function that allows data to be loaded before rendering takes place. This function has been renamed from `preload` to [`load`](load), it now lives in a `+page.js` (or `+layout.js`) next to its `+page.svelte` (or `+layout.svelte`), and its API has changed. Instead of two arguments — `page` and `session` — there is a single `event` argument. There is no more `this` object, and consequently no `this.fetch`, `this.error` or `this.redirect`. Instead, you can get [`fetch`](load#making-fetch-requests) from the input methods, and both [`error`](load#errors) and [`redirect`](load#redirects) are now thrown. "
dfe2cfe2,204,Stores,Migrating from Sapper > Pages and layouts > Stores,/60-appendix/10-migrating.md,"In Sapper, you would get references to provided stores like so: ```js
// @filename: ambient.d.ts
declare module '@sapper/app';

// @filename: index.js
// 
import { stores } from '@sapper/app';
const { preloading, page, session } = stores();
``` The `page` store still exists; `preloading` has been replaced with a `navigating` store that contains `from` and `to` properties. `page` now has `url` and `params` properties, but no `path` or `query`. You access them differently in SvelteKit. `stores` is now `getStores`, but in most cases it is unnecessary since you can import `navigating`, and `page` directly from [`$app/stores`](modules#$app-stores). "
b27b7a7b,41,Routing,Migrating from Sapper > Pages and layouts > Routing,/60-appendix/10-migrating.md,"Regex routes are no longer supported. Instead, use [advanced route matching](advanced-routing#matching). "
df149f14,61,Segments,Migrating from Sapper > Pages and layouts > Segments,/60-appendix/10-migrating.md,"Previously, layout components received a `segment` prop indicating the child segment. This has been removed; you should use the more flexible `$page.url.pathname` value to derive the segment you're interested in. "
cfb60836,129,URLs,Migrating from Sapper > Pages and layouts > URLs,/60-appendix/10-migrating.md,"In Sapper, all relative URLs were resolved against the base URL — usually `/`, unless the `basepath` option was used — rather than against the current page. This caused problems and is no longer the case in SvelteKit. Instead, relative URLs are resolved against the current page (or the destination page, for `fetch` URLs in `load` functions) instead. In most cases, it's easier to use root-relative (i.e. starts with `/`) URLs, since their meaning is not context-dependent. "
ac7bc47b,69,<a> attributes,Migrating from Sapper > Pages and layouts > <a> attributes,/60-appendix/10-migrating.md,"*   `sapper:prefetch` is now `data-sveltekit-preload-data`
*   `sapper:noscroll` is now `data-sveltekit-noscroll` "
db352b35,185,Endpoints,Migrating from Sapper > Endpoints,/60-appendix/10-migrating.md,"In Sapper, [server routes](routing#server) received the `req` and `res` objects exposed by Node's `http` module (or the augmented versions provided by frameworks like Polka and Express). SvelteKit is designed to be agnostic as to where the app is running — it could be running on a Node server, but could equally be running on a serverless platform or in a Cloudflare Worker. For that reason, you no longer interact directly with `req` and `res`. Your endpoints will need to be updated to match the new signature. To support this environment-agnostic behavior, `fetch` is now available in the global context, so you don't need to import `node-fetch`, `cross-fetch`, or similar server-side fetch implementations in order to use it. "
10781078,30,Integrations,Migrating from Sapper > Integrations,/60-appendix/10-migrating.md,See [the FAQ](/faq#integrations) for detailed information about integrations. 
a896b096,461,HTML minifier,Migrating from Sapper > Integrations > HTML minifier,/60-appendix/10-migrating.md,"Sapper includes `html-minifier` by default. SvelteKit does not include this, but you can add it as a prod dependency and then use it through a [hook](hooks#server-hooks-handle): ```js
// @filename: ambient.d.ts
/// <reference types=""@sveltejs/kit"" />
declare module 'html-minifier';

// @filename: index.js
// 
import { minify } from 'html-minifier';
import { building } from '$app/environment';

const minification_options = {
	collapseBooleanAttributes: true,
	collapseWhitespace: true,
	conservativeCollapse: true,
	decodeEntities: true,
	html5: true,
	ignoreCustomComments: [/^#/],
	minifyCSS: true,
	minifyJS: false,
	removeAttributeQuotes: true,
	removeComments: false, // some hydration code needs comments, so leave them in
	removeOptionalTags: true,
	removeRedundantAttributes: true,
	removeScriptTypeAttributes: true,
	removeStyleLinkTypeAttributes: true,
	sortAttributes: true,
	sortClassName: true
};

/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	let page = '';

	return resolve(event, {
		transformPageChunk: ({ html, done }) => {
			page += html;
			if (done) {
				return building ? minify(page, minification_options) : page;
			}
		}
	});
}
``` Note that `prerendering` is `false` when using `vite preview` to test the production build of the site, so to verify the results of minifying, you'll need to inspect the built HTML files directly. "
5c2d9a2d,108,FAQs,Additional resources > FAQs,/60-appendix/20-additional-resources.md,Please see the [SvelteKit FAQ](/faq) for solutions to common issues and helpful tips and tricks. The [Svelte FAQ](https://svelte.dev/faq) and [`vite-plugin-svelte` FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md) may also be helpful for questions deriving from those libraries. 
3ac392c3,321,Examples,Additional resources > Examples,/60-appendix/20-additional-resources.md,"We've written and published a few different SvelteKit sites as examples: *   [`sveltejs/realworld`](https://github.com/sveltejs/realworld) contains an example blog site
*   [The `sites/kit.svelte.dev` directory](https://github.com/sveltejs/kit/tree/master/sites/kit.svelte.dev) contains the code for this site
*   [`sveltejs/sites`](https://github.com/sveltejs/sites) contains the code for [svelte.dev](https://github.com/sveltejs/sites/tree/master/sites/svelte.dev) and for a [HackerNews clone](https://github.com/sveltejs/sites/tree/master/sites/hn.svelte.dev) SvelteKit users have also published plenty of examples on GitHub, under the [#sveltekit](https://github.com/topics/sveltekit) and [#sveltekit-template](https://github.com/topics/sveltekit-template) topics, as well as on [the Svelte Society site](https://sveltesociety.dev/templates#svelte-kit). Note that these have not been vetted by the maintainers and may not be up to date. "
8694eb94,113,Support,Additional resources > Support,/60-appendix/20-additional-resources.md,"You can ask for help on [Discord](https://svelte.dev/chat) and [StackOverflow](https://stackoverflow.com/questions/tagged/sveltekit). Please first search for information related to your issue in the FAQ, Google or another search engine, issue tracker, and Discord chat history in order to be respectful of others' time. There are many more people asking questions than answering them, so this will help in allowing the community to grow in a scalable fashion. "
f3097b09,45,Glossary,Glossary,/60-appendix/30-glossary.md,The core of SvelteKit provides a highly configurable rendering engine. This section describes some of the terms used when discussing rendering. A reference for setting these options is provided in the documentation above. 
6661f561,71,CSR,Glossary > CSR,/60-appendix/30-glossary.md,"Client-side rendering (CSR) is the generation of the page contents in the web browser using JavaScript. In SvelteKit, client-side rendering will be used by default, but you can turn off JavaScript with [the `csr = false` page option](page-options#csr). "
c1007100,170,Hydration,Glossary > Hydration,/60-appendix/30-glossary.md,"Svelte components store some state and update the DOM when the state is updated. When fetching data during SSR, by default SvelteKit will store this data and transmit it to the client along with the server-rendered HTML. The components can then be initialized on the client with that data without having to call the same API endpoints again. Svelte will then check that the DOM is in the expected state and attach event listeners in a process called hydration. Once the components are fully hydrated, they can react to changes to their properties just like any newly created Svelte component. In SvelteKit, pages will be hydrated by default, but you can turn off JavaScript with [the `csr = false` page option](page-options#csr). "
1641a741,284,Prerendering,Glossary > Prerendering,/60-appendix/30-glossary.md,"Prerendering means computing the contents of a page at build time and saving the HTML for display. This approach has the same benefits as traditional server-rendered pages, but avoids recomputing the page for each visitor and so scales nearly for free as the number of visitors increases. The tradeoff is that the build process is more expensive and prerendered content can only be updated by building and deploying a new version of the application. Not all pages can be prerendered. The basic rule is this: for content to be prerenderable, any two users hitting it directly must get the same content from the server, and the page must not contain [actions](form-actions). Note that you can still prerender content that is loaded based on the page's parameters as long as all users will be seeing the same prerendered content. Pre-rendered pages are not limited to static content. You can build personalized pages if user-specific data is fetched and rendered client-side. This is subject to the caveat that you will experience the downsides of not doing SSR for that content as discussed above. In SvelteKit, you can control prerendering with [the `prerender` page option](page-options#prerender) and [`prerender` config](configuration#prerender) in `svelte.config.js`. "
ba2e8a2e,168,Routing,Glossary > Routing,/60-appendix/30-glossary.md,"By default, when you navigate to a new page (by clicking on a link or using the browser's forward or back buttons), SvelteKit will intercept the attempted navigation and handle it instead of allowing the browser to send a request to the server for the destination page. SvelteKit will then update the displayed contents on the client by rendering the component for the new page, which in turn can make calls to the necessary API endpoints. This process of updating the page on the client in response to attempted navigation is called client-side routing. In SvelteKit, client-side routing will be used by default, but you can skip it with [`data-sveltekit-reload`](link-options#data-sveltekit-reload). "
8e4b264,170,SPA,Glossary > SPA,/60-appendix/30-glossary.md,"A single-page app (SPA) is an application in which all requests to the server load a single HTML file which then does client-side rendering of the requested contents based on the requested URL. All navigation is handled on the client-side in a process called client-side routing with per-page contents being updated and common layout elements remaining largely unchanged. SPAs do not provide SSR, which has the shortcoming described above. However, some applications are not greatly impacted by these shortcomings such as a complex business application behind a login where SEO would not be important and it is known that users will be accessing the application from a consistent computing environment. In SvelteKit, you can [build a SPA with `adapter-static`](adapter-static#spa-mode). "
f71f7b1f,239,SSG,Glossary > SSG,/60-appendix/30-glossary.md,"Static Site Generation (SSG) is a term that refers to a site where every page is prerendered. SvelteKit was not built to do only static site generation like some tools and so may not scale as well to efficiently render a very large number of pages as tools built specifically for that purpose. However, in contrast to most purpose-built SSGs, SvelteKit does nicely allow for mixing and matching different rendering types on different pages. One benefit of fully prerendering a site is that you do not need to maintain or pay for servers to perform SSR. Once generated, the site can be served from CDNs, leading to great ""time to first byte"" performance. This delivery model is often referred to as JAMstack. In SvelteKit, you can do static site generation by using [`adapter-static`](adapter-static) or by configuring every page to be prerendered using [the `prerender` page option](page-options#prerender) or [`prerender` config](configuration#prerender) in `svelte.config.js`. "
62e80ce8,159,SSR,Glossary > SSR,/60-appendix/30-glossary.md,"Server-side rendering (SSR) is the generation of the page contents on the server. SSR is generally preferred for SEO. While some search engines can index content that is dynamically generated on the client-side it may take longer even in these cases. It also tends to improve perceived performance and makes your app accessible to users if JavaScript fails or is disabled (which happens [more often than you probably think](https://kryogenix.org/code/browser/everyonehasjs.html)). In SvelteKit, pages are server-side rendered by default. You can disable SSR with [the `ssr` page option](https://kit.svelte.dev/docs/page-options#ssr). "
