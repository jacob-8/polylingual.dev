hash,token_count,title,combined_title,filename,content
4fea2bea,74,Before we begin,Introduction > Before we begin,/10-introduction.md,"> If you're new to Svelte or SvelteKit we recommend checking out the (experimental!) [interactive tutorial](https://learn.svelte.dev). > > If you get stuck, reach out for help in the [Discord chatroom](https://svelte.dev/chat). "
ccd048d0,75,What is SvelteKit?,Introduction > What is SvelteKit?,/10-introduction.md,"SvelteKit is a framework for rapidly developing robust, performant web applications using [Svelte](https://svelte.dev/). If you're coming from React, SvelteKit is similar to Next. If you're coming from Vue, SvelteKit is similar to Nuxt. "
e1f661f,125,What is Svelte?,Introduction > What is Svelte?,/10-introduction.md,"In short, Svelte is a way of writing user interface components — like a navigation bar, comment section, or contact form — that users see and interact with in their browsers. The Svelte compiler converts your components to JavaScript that can be run to render the HTML for the page and to CSS that styles the page. You don't need to know Svelte to understand the rest of this guide, but it will help. If you'd like to learn more, check out [the Svelte tutorial](https://svelte.dev/tutorial). "
58531853,400,What does SvelteKit provide on top of Svelte?,Introduction > What does SvelteKit provide on top of Svelte?,/10-introduction.md,"Svelte renders UI components. You can compose these components and render an entire page with just Svelte, but you need more than just Svelte to write an entire app. SvelteKit provides basic functionality like a [router](glossary#routing) — which updates the UI when a link is clicked — and [server-side rendering (SSR)](glossary#ssr). But beyond that, building an app with all the modern best practices is fiendishly complicated. Those practices include [build optimizations](https://vitejs.dev/guide/features.html#build-optimizations), so that you load only the minimal required code; [offline support](service-workers); [preloading](link-options#data-sveltekit-preload-data) pages before the user initiates navigation; [configurable rendering](page-options) that allows you to render different parts of your app on the server with [SSR](glossary#ssr), in the browser [client-side rendering](glossary#csr), or at build-time with [prerendering](glossary#prerendering); and many other things. SvelteKit does all the boring stuff for you so that you can get on with the creative part. It reflects changes to your code in the browser instantly to provide a lightning-fast and feature-rich development experience by leveraging [Vite](https://vitejs.dev/) with a [Svelte plugin](https://github.com/sveltejs/vite-plugin-svelte) to do [Hot Module Replacement (HMR)](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#hot). "
59a2f3a2,216,Project structure,Project structure,/30-project-structure.md,"A typical SvelteKit project looks like this: ```bash my-project/ ├ src/ │ ├ lib/ │ │ ├ server/ │ │ │ └ [your server-only lib files] │ │ └ [your lib files] │ ├ params/ │ │ └ [your param matchers] │ ├ routes/ │ │ └ [your routes] │ ├ app.html │ ├ error.html │ ├ hooks.client.js │ └ hooks.server.js ├ static/ │ └ [your static assets] ├ tests/ │ └ [your tests] ├ package.json ├ svelte.config.js ├ tsconfig.json └ vite.config.js ``` You'll also find common files like `.gitignore` and `.npmrc` (and `.prettierrc` and `.eslintrc.cjs` and so on, if you chose those options when running `npm create svelte@latest`). "
e40abb0a,761,src,Project structure > Project files > src,/30-project-structure.md,"The `src` directory contains the meat of your project. Everything except `src/routes` and `src/app.html` is optional. *   `lib` contains your library code (utilities and components), which can be imported via the [`$lib`](modules#$lib) alias, or packaged up for distribution using [`svelte-package`](packaging)     *   `server` contains your server-only library code. It can be imported by using the [`$lib/server`](server-only-modules) alias. SvelteKit will prevent you from importing these in client code. *   `params` contains any [param matchers](advanced-routing#matching) your app needs *   `routes` contains the [routes](routing) of your application. You can also colocate other components that are only used within a single route here *   `app.html` is your page template — an HTML document containing the following placeholders:     *   `%sveltekit.head%` — `<link>` and `<script>` elements needed by the app, plus any `<svelte:head>` content     *   `%sveltekit.body%` — the markup for a rendered page. This should live inside a `<div>` or other element, rather than directly inside `<body>`, to prevent bugs caused by browser extensions injecting elements that are then destroyed by the hydration process. SvelteKit will warn you in development if this is not the case     *   `%sveltekit.assets%` — either [`paths.assets`](configuration#paths), if specified, or a relative path to [`paths.base`](configuration#paths)     *   `%sveltekit.nonce%` — a [CSP](configuration#csp) nonce for manually included links and scripts, if used     *   `%sveltekit.env.[NAME]%` - this will be replaced at render time with the `[NAME]` environment variable, which must begin with the [`publicPrefix`](https://kit.svelte.dev/docs/configuration#env) (usually `PUBLIC_`). It will fallback to `''` if not matched. *   `error.html` is the page that is rendered when everything else fails. It can contain the following placeholders:     *   `%sveltekit.status%` — the HTTP status     *   `%sveltekit.error.message%` — the error message *   `hooks.client.js` contains your client [hooks](/docs/hooks) *   `hooks.server.js` contains your server [hooks](/docs/hooks) *   `service-worker.js` contains your [service worker](/docs/service-workers) You can use `.ts` files instead of `.js` files, if using TypeScript. If you added [Vitest](https://vitest.dev) when you set up your project, your unit tests will live in the `src` directory with a `.test.js` (or `.test.ts`) extension. "
8c823682,39,static,Project structure > Project files > static,/30-project-structure.md,"Any static assets that should be served as-is, like `robots.txt` or `favicon.png`, go in here. "
97016f01,41,tests,Project structure > Project files > tests,/30-project-structure.md,"If you added [Playwright](https://playwright.dev/) for browser testing when you set up your project, the tests will live in this directory. "
f42b28ab,119,package.json,Project structure > Project files > package.json,/30-project-structure.md,"Your `package.json` file must include `@sveltejs/kit`, `svelte` and `vite` as `devDependencies`. When you create a project with `npm create svelte@latest`, you'll also notice that `package.json` includes `""type"": ""module""`. This means that `.js` files are interpreted as native JavaScript modules with `import` and `export` keywords. Legacy CommonJS files need a `.cjs` file extension. "
dbb5b8b5,34,svelte.config.js,Project structure > Project files > svelte.config.js,/30-project-structure.md,This file contains your Svelte and SvelteKit [configuration](configuration). 
7c5d2c5,102,tsconfig.json,Project structure > Project files > tsconfig.json,/30-project-structure.md,"This file (or `jsconfig.json`, if you prefer type-checked `.js` files over `.ts` files) configures TypeScript, if you added typechecking during `npm create svelte@latest`. Since SvelteKit relies on certain configuration being set a specific way, it generates its own `.svelte-kit/tsconfig.json` file which your own config `extends`. "
8d4f914f,88,vite.config.js,Project structure > Project files > vite.config.js,/30-project-structure.md,"A SvelteKit project is really just a [Vite](https://vitejs.dev) project that uses the [`@sveltejs/kit/vite`](modules#sveltejs-kit-vite) plugin, along with any other [Vite configuration](https://vitejs.dev/config/). "
f5bfa1bf,85,.svelte-kit,Project structure > Other files > .svelte-kit,/30-project-structure.md,"As you develop and build your project, SvelteKit will generate files in a `.svelte-kit` directory (configurable as [`outDir`](configuration#outdir)). You can ignore its contents, and delete them at any time (they will be regenerated when you next `dev` or `build`). "
57001b80,186,Web standards,Web standards,/40-web-standards.md,"Throughout this documentation, you'll see references to the standard [Web APIs](https://developer.mozilla.org/en-US/docs/Web/API) that SvelteKit builds on top of. Rather than reinventing the wheel, we *use the platform*, which means your existing web development skills are applicable to SvelteKit. Conversely, time spent learning SvelteKit will help you be a better web developer elsewhere. These APIs are available in all modern browsers and in many non-browser environments like Cloudflare Workers, Deno and Vercel Edge Functions. During development, and in [adapters](adapters) for Node-based environments (including AWS Lambda), they're made available via polyfills where necessary (for now, that is — Node is rapidly adding support for more web standards). In particular, you'll get comfortable with the following: "
83ead3e,242,Fetch APIs,Web standards > Fetch APIs,/40-web-standards.md,"SvelteKit uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) for getting data from the network. It's available in [hooks](hooks) and [server routes](routing#server) as well as in the browser. > A special version of `fetch` is available in [`load`](load) functions, [server hooks](hooks#server-hooks) and [API routes](routing#server) for invoking endpoints directly during server-side rendering, without making an HTTP call, while preserving credentials. (To make credentialled fetches in server-side code outside `load`, you must explicitly pass `cookie` and/or `authorization` headers.) It also allows you to make relative requests, whereas server-side `fetch` normally requires a fully qualified URL. Besides `fetch` itself, the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) includes the following interfaces: "
eca608a6,95,Request,Web standards > Fetch APIs > Request,/40-web-standards.md,An instance of [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) is accessible in [hooks](hooks) and [server routes](routing#server) as `event.request`. It contains useful methods like `request.json()` and `request.formData()` for getting data that was posted to an endpoint. 
239a379a,85,Response,Web standards > Fetch APIs > Response,/40-web-standards.md,"An instance of [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) is returned from `await fetch(...)` and handlers in `+server.js` files. Fundamentally, a SvelteKit app is a machine for turning a `Request` into a `Response`. "
e146614,185,Headers,Web standards > Fetch APIs > Headers,/40-web-standards.md,The [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) interface allows you to read incoming `request.headers` and set outgoing `response.headers`: ```js // @errors: 2461 /// file: src/routes/what-is-my-user-agent/+server.js import { json } from '@sveltejs/kit';  /** @type {import('./$types').RequestHandler} */ export function GET(event) { 	// log all headers 	console.log(...event.request.headers);  	return json({ 		// retrieve a specific header 		userAgent: event.request.headers.get('user-agent') 	}); } ``` 
ad82f482,176,FormData,Web standards > FormData,/40-web-standards.md,When dealing with HTML native form submissions you'll be working with [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) objects. ```js // @errors: 2461 /// file: src/routes/hello/+server.js import { json } from '@sveltejs/kit';  /** @type {import('./$types').RequestHandler} */ export async function POST(event) { 	const body = await event.request.formData();  	// log all fields 	console.log([...body]);  	return json({ 		// get a specific field's value 		name: body.get('name') ?? 'world' 	}); } ``` 
2b17d717,179,Stream APIs,Web standards > Stream APIs,/40-web-standards.md,"Most of the time, your endpoints will return complete data, as in the `userAgent` example above. Sometimes, you may need to return a response that's too large to fit in memory in one go, or is delivered in chunks, and for this the platform provides [streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API) — [ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), [WritableStream](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream) and [TransformStream](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream). "
5bfba7fb,151,URL APIs,Web standards > URL APIs,/40-web-standards.md,"URLs are represented by the [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) interface, which includes useful properties like `origin` and `pathname` (and, in the browser, `hash`). This interface shows up in various places — `event.url` in [hooks](hooks) and [server routes](routing#server), [`$page.url`](modules#$app-stores) in [pages](routing#page), `from` and `to` in [`beforeNavigate` and `afterNavigate`](modules#$app-navigation) and so on. "
7c92cd92,127,URLSearchParams,Web standards > URL APIs > URLSearchParams,/40-web-standards.md,"Wherever you encounter a URL, you can access query parameters via `url.searchParams`, which is an instance of [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams): ```js // @filename: ambient.d.ts declare global { 	const url: URL; }  export {};  // @filename: index.js // ---cut--- const foo = url.searchParams.get('foo'); ``` "
770d030d,98,Web Crypto,Web standards > Web Crypto,/40-web-standards.md,"The [Web Crypto API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API) is made available via the `crypto` global. It's used internally for [Content Security Policy](configuration#csp) headers, but you can also use it for things like generating UUIDs: ```js const uuid = crypto.randomUUID(); ``` "
